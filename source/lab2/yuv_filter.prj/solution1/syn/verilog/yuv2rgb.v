// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv2rgb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width_read,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width_read;
input  [15:0] in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] x_fu_225_p2;
reg   [15:0] x_reg_588;
wire    ap_CS_fsm_state2;
wire   [22:0] add_ln90_fu_255_p2;
reg   [22:0] add_ln90_reg_593;
wire   [0:0] icmp_ln85_fu_220_p2;
wire   [15:0] y_fu_276_p2;
reg   [15:0] y_reg_601;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln90_1_fu_291_p1;
reg   [63:0] zext_ln90_1_reg_606;
wire   [0:0] icmp_ln88_fu_271_p2;
wire    ap_CS_fsm_state4;
reg   [7:0] Y_reg_630;
wire    ap_CS_fsm_state6;
wire  signed [7:0] D_fu_305_p2;
reg  signed [7:0] D_reg_635;
wire    ap_CS_fsm_state7;
wire  signed [7:0] E_fu_311_p2;
reg  signed [7:0] E_reg_642;
wire  signed [17:0] grp_fu_547_p3;
reg  signed [17:0] add_ln96_reg_647;
wire   [16:0] mul_ln97_1_fu_325_p2;
reg   [16:0] mul_ln97_1_reg_654;
wire   [7:0] R_fu_379_p3;
reg   [7:0] R_reg_659;
wire    ap_CS_fsm_state8;
wire   [7:0] G_fu_446_p3;
reg   [7:0] G_reg_664;
wire   [7:0] B_fu_539_p3;
reg   [7:0] B_reg_669;
wire    ap_CS_fsm_state9;
reg   [15:0] x_0_reg_198;
reg   [15:0] y_0_reg_209;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state5;
wire   [12:0] trunc_ln90_fu_231_p1;
wire   [14:0] trunc_ln90_1_fu_243_p1;
wire   [22:0] zext_ln90_cast_fu_235_p3;
wire   [22:0] zext_ln90_2_cast_fu_247_p3;
wire   [22:0] zext_ln90_fu_282_p1;
wire   [22:0] add_ln90_1_fu_286_p2;
wire   [8:0] zext_ln93_fu_296_p1;
wire  signed [8:0] C_fu_299_p2;
wire  signed [7:0] mul_ln97_1_fu_325_p1;
wire  signed [17:0] grp_fu_555_p3;
wire   [1:0] tmp_1_fu_334_p4;
wire   [0:0] icmp_ln96_fu_343_p2;
wire   [0:0] tmp_3_fu_349_p3;
wire   [0:0] or_ln96_fu_373_p2;
wire   [7:0] select_ln96_fu_365_p3;
wire   [7:0] trunc_ln_fu_356_p4;
wire  signed [16:0] grp_fu_565_p3;
wire  signed [17:0] sext_ln97_2_fu_390_p1;
(* use_dsp48 = "no" *) wire   [17:0] add_ln97_1_fu_393_p2;
wire   [1:0] tmp_4_fu_398_p4;
wire   [0:0] icmp_ln97_fu_408_p2;
wire   [0:0] tmp_5_fu_414_p3;
wire   [0:0] or_ln97_fu_440_p2;
wire   [7:0] select_ln97_fu_432_p3;
wire   [7:0] trunc_ln3_fu_422_p4;
wire   [16:0] shl_ln_fu_454_p3;
wire   [9:0] shl_ln98_1_fu_465_p3;
wire  signed [17:0] sext_ln98_1_fu_472_p1;
(* use_dsp48 = "no" *) wire   [17:0] add_ln98_1_fu_476_p2;
wire  signed [18:0] sext_ln98_2_fu_481_p1;
wire  signed [18:0] sext_ln98_fu_461_p1;
wire   [18:0] add_ln98_fu_485_p2;
wire   [2:0] tmp_6_fu_491_p4;
wire   [0:0] icmp_ln98_fu_501_p2;
wire   [0:0] tmp_7_fu_507_p3;
wire   [0:0] or_ln98_fu_533_p2;
wire   [7:0] select_ln98_fu_525_p3;
wire   [7:0] trunc_ln4_fu_515_p4;
wire   [9:0] grp_fu_547_p0;
wire   [8:0] grp_fu_547_p2;
wire   [9:0] grp_fu_555_p0;
wire  signed [7:0] grp_fu_565_p0;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

yuv_filter_mac_mueOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
yuv_filter_mac_mueOg_U15(
    .din0(grp_fu_547_p0),
    .din1(C_fu_299_p2),
    .din2(grp_fu_547_p2),
    .dout(grp_fu_547_p3)
);

yuv_filter_mac_mufYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
yuv_filter_mac_mufYi_U16(
    .din0(grp_fu_555_p0),
    .din1(E_reg_642),
    .din2(add_ln96_reg_647),
    .dout(grp_fu_555_p3)
);

yuv_filter_mac_mug8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
yuv_filter_mac_mug8j_U17(
    .din0(grp_fu_565_p0),
    .din1(D_reg_635),
    .din2(mul_ln97_1_reg_654),
    .dout(grp_fu_565_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln88_fu_271_p2 == 1'd1))) begin
        x_0_reg_198 <= x_reg_588;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_0_reg_198 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        y_0_reg_209 <= y_reg_601;
    end else if (((icmp_ln85_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_0_reg_209 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        B_reg_669 <= B_fu_539_p3;
        G_reg_664 <= G_fu_446_p3;
        R_reg_659 <= R_fu_379_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        D_reg_635 <= D_fu_305_p2;
        E_reg_642 <= E_fu_311_p2;
        add_ln96_reg_647 <= grp_fu_547_p3;
        mul_ln97_1_reg_654 <= mul_ln97_1_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Y_reg_630 <= in_channels_ch1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln90_reg_593[22 : 8] <= add_ln90_fu_255_p2[22 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_reg_588 <= x_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_601 <= y_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln88_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln90_1_reg_606[22 : 0] <= zext_ln90_1_fu_291_p1[22 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln85_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln85_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln88_fu_271_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_fu_539_p3 = ((or_ln98_fu_533_p2[0:0] === 1'b1) ? select_ln98_fu_525_p3 : trunc_ln4_fu_515_p4);

assign C_fu_299_p2 = ($signed(9'd496) + $signed(zext_ln93_fu_296_p1));

assign D_fu_305_p2 = (in_channels_ch2_q0 ^ 8'd128);

assign E_fu_311_p2 = (in_channels_ch3_q0 ^ 8'd128);

assign G_fu_446_p3 = ((or_ln97_fu_440_p2[0:0] === 1'b1) ? select_ln97_fu_432_p3 : trunc_ln3_fu_422_p4);

assign R_fu_379_p3 = ((or_ln96_fu_373_p2[0:0] === 1'b1) ? select_ln96_fu_365_p3 : trunc_ln_fu_356_p4);

assign add_ln90_1_fu_286_p2 = (zext_ln90_fu_282_p1 + add_ln90_reg_593);

assign add_ln90_fu_255_p2 = (zext_ln90_cast_fu_235_p3 + zext_ln90_2_cast_fu_247_p3);

assign add_ln97_1_fu_393_p2 = ($signed(sext_ln97_2_fu_390_p1) + $signed(add_ln96_reg_647));

assign add_ln98_1_fu_476_p2 = ($signed(sext_ln98_1_fu_472_p1) + $signed(add_ln96_reg_647));

assign add_ln98_fu_485_p2 = ($signed(sext_ln98_2_fu_481_p1) + $signed(sext_ln98_fu_461_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = in_width_read;

assign ap_return_1 = in_height_read;

assign grp_fu_547_p0 = 18'd298;

assign grp_fu_547_p2 = 18'd128;

assign grp_fu_555_p0 = 18'd409;

assign grp_fu_565_p0 = 16'd65436;

assign icmp_ln85_fu_220_p2 = ((x_0_reg_198 == in_width_read) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_271_p2 = ((y_0_reg_209 == in_height_read) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_343_p2 = ((tmp_1_fu_334_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_408_p2 = ((tmp_4_fu_398_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_501_p2 = (($signed(tmp_6_fu_491_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign in_channels_ch1_address0 = zext_ln90_1_fu_291_p1;

assign in_channels_ch2_address0 = zext_ln90_1_reg_606;

assign in_channels_ch3_address0 = zext_ln90_1_reg_606;

assign mul_ln97_1_fu_325_p1 = E_fu_311_p2;

assign mul_ln97_1_fu_325_p2 = ($signed(17'd130864) * $signed(mul_ln97_1_fu_325_p1));

assign or_ln96_fu_373_p2 = (tmp_3_fu_349_p3 | icmp_ln96_fu_343_p2);

assign or_ln97_fu_440_p2 = (tmp_5_fu_414_p3 | icmp_ln97_fu_408_p2);

assign or_ln98_fu_533_p2 = (tmp_7_fu_507_p3 | icmp_ln98_fu_501_p2);

assign out_channels_ch1_address0 = zext_ln90_1_reg_606;

assign out_channels_ch1_d0 = R_reg_659;

assign out_channels_ch2_address0 = zext_ln90_1_reg_606;

assign out_channels_ch2_d0 = G_reg_664;

assign out_channels_ch3_address0 = zext_ln90_1_reg_606;

assign out_channels_ch3_d0 = B_reg_669;

assign select_ln96_fu_365_p3 = ((icmp_ln96_fu_343_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln97_fu_432_p3 = ((icmp_ln97_fu_408_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln98_fu_525_p3 = ((icmp_ln98_fu_501_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign sext_ln97_2_fu_390_p1 = grp_fu_565_p3;

assign sext_ln98_1_fu_472_p1 = $signed(shl_ln98_1_fu_465_p3);

assign sext_ln98_2_fu_481_p1 = $signed(add_ln98_1_fu_476_p2);

assign sext_ln98_fu_461_p1 = $signed(shl_ln_fu_454_p3);

assign shl_ln98_1_fu_465_p3 = {{D_reg_635}, {2'd0}};

assign shl_ln_fu_454_p3 = {{D_reg_635}, {9'd0}};

assign tmp_1_fu_334_p4 = {{grp_fu_555_p3[17:16]}};

assign tmp_3_fu_349_p3 = grp_fu_555_p3[32'd17];

assign tmp_4_fu_398_p4 = {{add_ln97_1_fu_393_p2[17:16]}};

assign tmp_5_fu_414_p3 = add_ln97_1_fu_393_p2[32'd17];

assign tmp_6_fu_491_p4 = {{add_ln98_fu_485_p2[18:16]}};

assign tmp_7_fu_507_p3 = add_ln98_fu_485_p2[32'd18];

assign trunc_ln3_fu_422_p4 = {{add_ln97_1_fu_393_p2[15:8]}};

assign trunc_ln4_fu_515_p4 = {{add_ln98_fu_485_p2[15:8]}};

assign trunc_ln90_1_fu_243_p1 = x_0_reg_198[14:0];

assign trunc_ln90_fu_231_p1 = x_0_reg_198[12:0];

assign trunc_ln_fu_356_p4 = {{grp_fu_555_p3[15:8]}};

assign x_fu_225_p2 = (x_0_reg_198 + 16'd1);

assign y_fu_276_p2 = (y_0_reg_209 + 16'd1);

assign zext_ln90_1_fu_291_p1 = add_ln90_1_fu_286_p2;

assign zext_ln90_2_cast_fu_247_p3 = {{trunc_ln90_1_fu_243_p1}, {8'd0}};

assign zext_ln90_cast_fu_235_p3 = {{trunc_ln90_fu_231_p1}, {10'd0}};

assign zext_ln90_fu_282_p1 = y_0_reg_209;

assign zext_ln93_fu_296_p1 = Y_reg_630;

always @ (posedge ap_clk) begin
    add_ln90_reg_593[7:0] <= 8'b00000000;
    zext_ln90_1_reg_606[63:23] <= 41'b00000000000000000000000000000000000000000;
end

endmodule //yuv2rgb
