// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rgb2yuv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width_read,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state10 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width_read;
input  [15:0] in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] indvar_flatten_reg_196;
reg   [15:0] x_0_reg_207;
reg   [15:0] y_0_reg_218;
wire   [31:0] mul_ln30_fu_566_p2;
reg   [31:0] mul_ln30_reg_608;
wire   [0:0] icmp_ln45_fu_237_p2;
reg   [0:0] icmp_ln45_reg_613;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln45_reg_613_pp0_iter1_reg;
reg   [0:0] icmp_ln45_reg_613_pp0_iter2_reg;
reg   [0:0] icmp_ln45_reg_613_pp0_iter3_reg;
reg   [0:0] icmp_ln45_reg_613_pp0_iter4_reg;
reg   [0:0] icmp_ln45_reg_613_pp0_iter5_reg;
wire   [31:0] add_ln45_fu_242_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] select_ln54_1_fu_267_p3;
reg   [15:0] select_ln54_1_reg_622;
wire   [22:0] add_ln54_1_fu_309_p2;
reg   [22:0] add_ln54_1_reg_627;
wire   [15:0] y_fu_315_p2;
wire   [63:0] zext_ln54_1_fu_321_p1;
reg   [63:0] zext_ln54_1_reg_637;
reg   [63:0] zext_ln54_1_reg_637_pp0_iter2_reg;
reg   [63:0] zext_ln54_1_reg_637_pp0_iter3_reg;
reg   [63:0] zext_ln54_1_reg_637_pp0_iter4_reg;
reg   [63:0] zext_ln54_1_reg_637_pp0_iter5_reg;
reg   [7:0] R_reg_659;
reg   [7:0] G_reg_666;
reg   [7:0] B_reg_673;
wire   [15:0] mul_ln59_fu_331_p2;
reg   [15:0] mul_ln59_reg_681;
reg   [7:0] trunc_ln_reg_686;
wire   [15:0] sub_ln58_fu_459_p2;
reg   [15:0] sub_ln58_reg_691;
wire  signed [15:0] grp_fu_581_p3;
reg  signed [15:0] add_ln58_reg_696;
reg    ap_enable_reg_pp0_iter5;
reg   [7:0] trunc_ln6_reg_701;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg   [15:0] ap_phi_mux_x_0_phi_fu_211_p4;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln48_fu_254_p2;
wire   [15:0] x_fu_248_p2;
wire   [12:0] trunc_ln54_fu_275_p1;
wire   [14:0] trunc_ln54_1_fu_287_p1;
wire   [22:0] zext_ln54_cast_fu_279_p3;
wire   [22:0] zext_ln54_2_cast_fu_291_p3;
wire   [15:0] select_ln54_fu_259_p3;
wire   [22:0] zext_ln54_fu_305_p1;
wire   [22:0] add_ln54_fu_299_p2;
wire   [7:0] mul_ln59_fu_331_p1;
wire   [13:0] shl_ln_fu_340_p3;
wire   [8:0] shl_ln57_1_fu_351_p3;
wire   [14:0] shl_ln57_2_fu_368_p3;
wire   [14:0] zext_ln57_3_fu_358_p1;
wire   [14:0] zext_ln57_2_fu_347_p1;
wire   [14:0] add_ln57_fu_382_p2;
wire   [15:0] zext_ln57_8_fu_388_p1;
wire   [15:0] zext_ln57_6_fu_375_p1;
wire   [8:0] zext_ln57_5_fu_365_p1;
wire   [8:0] add_ln57_3_fu_398_p2;
wire   [12:0] grp_fu_572_p3;
wire   [15:0] zext_ln57_10_fu_408_p1;
wire   [15:0] add_ln57_1_fu_392_p2;
wire   [15:0] add_ln57_2_fu_411_p2;
wire   [7:0] mul_ln58_1_fu_427_p1;
wire   [15:0] zext_ln57_4_fu_362_p1;
wire   [14:0] shl_ln1_fu_433_p3;
wire   [11:0] shl_ln58_1_fu_444_p3;
wire   [15:0] zext_ln58_fu_440_p1;
wire   [15:0] zext_ln58_2_fu_455_p1;
wire   [12:0] zext_ln58_1_fu_451_p1;
wire   [12:0] sub_ln59_fu_465_p2;
wire   [8:0] shl_ln2_fu_475_p3;
wire  signed [13:0] sext_ln59_fu_471_p1;
wire   [13:0] zext_ln59_fu_482_p1;
wire   [13:0] sub_ln59_1_fu_486_p2;
wire   [13:0] add_ln59_1_fu_492_p2;
wire  signed [15:0] sext_ln59_1_fu_498_p1;
wire  signed [15:0] grp_fu_589_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln59_2_fu_502_p2;
wire   [15:0] add_ln58_1_fu_523_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln58_2_fu_528_p2;
wire   [7:0] trunc_ln5_fu_533_p4;
wire    ap_CS_fsm_state10;
wire   [15:0] mul_ln30_fu_566_p0;
wire   [15:0] mul_ln30_fu_566_p1;
wire   [5:0] grp_fu_572_p0;
wire   [7:0] grp_fu_572_p1;
wire   [8:0] grp_fu_572_p2;
wire  signed [6:0] grp_fu_581_p0;
wire   [7:0] grp_fu_581_p1;
wire   [15:0] grp_fu_581_p2;
wire  signed [7:0] grp_fu_589_p0;
wire   [7:0] grp_fu_589_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [12:0] grp_fu_572_p10;
wire   [12:0] grp_fu_572_p20;
wire   [14:0] grp_fu_581_p10;
wire   [31:0] mul_ln30_fu_566_p00;
wire   [31:0] mul_ln30_fu_566_p10;
wire   [15:0] mul_ln59_fu_331_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

yuv_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yuv_filter_mul_mubkb_U1(
    .din0(mul_ln30_fu_566_p0),
    .din1(mul_ln30_fu_566_p1),
    .dout(mul_ln30_fu_566_p2)
);

yuv_filter_mac_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 13 ))
yuv_filter_mac_mucud_U2(
    .din0(grp_fu_572_p0),
    .din1(grp_fu_572_p1),
    .din2(grp_fu_572_p2),
    .dout(grp_fu_572_p3)
);

yuv_filter_mac_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
yuv_filter_mac_mudEe_U3(
    .din0(grp_fu_581_p0),
    .din1(grp_fu_581_p1),
    .din2(grp_fu_581_p2),
    .dout(grp_fu_581_p3)
);

yuv_filter_mac_mueOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
yuv_filter_mac_mueOg_U4(
    .din0(grp_fu_589_p0),
    .din1(grp_fu_589_p1),
    .din2(mul_ln59_reg_681),
    .dout(grp_fu_589_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_196 <= add_ln45_fu_242_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_196 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_613 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        x_0_reg_207 <= select_ln54_1_reg_622;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_reg_207 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        y_0_reg_218 <= y_fu_315_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_0_reg_218 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_613_pp0_iter3_reg == 1'd0))) begin
        B_reg_673 <= in_channels_ch3_q0;
        G_reg_666 <= in_channels_ch2_q0;
        R_reg_659 <= in_channels_ch1_q0;
        mul_ln59_reg_681 <= mul_ln59_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln54_1_reg_627 <= add_ln54_1_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln45_reg_613_pp0_iter4_reg == 1'd0))) begin
        add_ln58_reg_696 <= grp_fu_581_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_613 <= icmp_ln45_fu_237_p2;
        icmp_ln45_reg_613_pp0_iter1_reg <= icmp_ln45_reg_613;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln45_reg_613_pp0_iter2_reg <= icmp_ln45_reg_613_pp0_iter1_reg;
        icmp_ln45_reg_613_pp0_iter3_reg <= icmp_ln45_reg_613_pp0_iter2_reg;
        icmp_ln45_reg_613_pp0_iter4_reg <= icmp_ln45_reg_613_pp0_iter3_reg;
        icmp_ln45_reg_613_pp0_iter5_reg <= icmp_ln45_reg_613_pp0_iter4_reg;
        zext_ln54_1_reg_637_pp0_iter2_reg[22 : 0] <= zext_ln54_1_reg_637[22 : 0];
        zext_ln54_1_reg_637_pp0_iter3_reg[22 : 0] <= zext_ln54_1_reg_637_pp0_iter2_reg[22 : 0];
        zext_ln54_1_reg_637_pp0_iter4_reg[22 : 0] <= zext_ln54_1_reg_637_pp0_iter3_reg[22 : 0];
        zext_ln54_1_reg_637_pp0_iter5_reg[22 : 0] <= zext_ln54_1_reg_637_pp0_iter4_reg[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln30_reg_608 <= mul_ln30_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln54_1_reg_622 <= select_ln54_1_fu_267_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_613_pp0_iter4_reg == 1'd0))) begin
        sub_ln58_reg_691[15 : 4] <= sub_ln58_fu_459_p2[15 : 4];
        trunc_ln6_reg_701 <= {{add_ln59_2_fu_502_p2[15:8]}};
        trunc_ln_reg_686 <= {{add_ln57_2_fu_411_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_613 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln54_1_reg_637[22 : 0] <= zext_ln54_1_fu_321_p1[22 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln45_fu_237_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_613 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_x_0_phi_fu_211_p4 = select_ln54_1_reg_622;
    end else begin
        ap_phi_mux_x_0_phi_fu_211_p4 = x_0_reg_207;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln45_reg_613_pp0_iter5_reg == 1'd0))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln45_reg_613_pp0_iter5_reg == 1'd0))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln45_reg_613_pp0_iter5_reg == 1'd0))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln45_fu_237_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln45_fu_237_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_242_p2 = (indvar_flatten_reg_196 + 32'd1);

assign add_ln54_1_fu_309_p2 = (zext_ln54_fu_305_p1 + add_ln54_fu_299_p2);

assign add_ln54_fu_299_p2 = (zext_ln54_cast_fu_279_p3 + zext_ln54_2_cast_fu_291_p3);

assign add_ln57_1_fu_392_p2 = (zext_ln57_8_fu_388_p1 + zext_ln57_6_fu_375_p1);

assign add_ln57_2_fu_411_p2 = (zext_ln57_10_fu_408_p1 + add_ln57_1_fu_392_p2);

assign add_ln57_3_fu_398_p2 = (9'd128 + zext_ln57_5_fu_365_p1);

assign add_ln57_fu_382_p2 = (zext_ln57_3_fu_358_p1 + zext_ln57_2_fu_347_p1);

assign add_ln58_1_fu_523_p2 = (16'd128 + sub_ln58_reg_691);

assign add_ln58_2_fu_528_p2 = ($signed(add_ln58_1_fu_523_p2) + $signed(add_ln58_reg_696));

assign add_ln59_1_fu_492_p2 = (14'd128 + sub_ln59_1_fu_486_p2);

assign add_ln59_2_fu_502_p2 = ($signed(sext_ln59_1_fu_498_p1) + $signed(grp_fu_589_p3));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = in_width_read;

assign ap_return_1 = in_height_read;

assign grp_fu_572_p0 = 13'd25;

assign grp_fu_572_p1 = grp_fu_572_p10;

assign grp_fu_572_p10 = B_reg_673;

assign grp_fu_572_p2 = grp_fu_572_p20;

assign grp_fu_572_p20 = add_ln57_3_fu_398_p2;

assign grp_fu_581_p0 = 15'd32730;

assign grp_fu_581_p1 = grp_fu_581_p10;

assign grp_fu_581_p10 = R_reg_659;

assign grp_fu_581_p2 = ($signed(16'd65462) * $signed({{1'b0}, {mul_ln58_1_fu_427_p1}}));

assign grp_fu_589_p0 = 16'd65442;

assign grp_fu_589_p1 = zext_ln57_4_fu_362_p1;

assign icmp_ln45_fu_237_p2 = ((indvar_flatten_reg_196 == mul_ln30_reg_608) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_254_p2 = ((y_0_reg_218 == in_height_read) ? 1'b1 : 1'b0);

assign in_channels_ch1_address0 = zext_ln54_1_fu_321_p1;

assign in_channels_ch2_address0 = zext_ln54_1_fu_321_p1;

assign in_channels_ch3_address0 = zext_ln54_1_fu_321_p1;

assign mul_ln30_fu_566_p0 = mul_ln30_fu_566_p00;

assign mul_ln30_fu_566_p00 = in_height_read;

assign mul_ln30_fu_566_p1 = mul_ln30_fu_566_p10;

assign mul_ln30_fu_566_p10 = in_width_read;

assign mul_ln58_1_fu_427_p1 = zext_ln57_4_fu_362_p1;

assign mul_ln59_fu_331_p1 = mul_ln59_fu_331_p10;

assign mul_ln59_fu_331_p10 = in_channels_ch1_q0;

assign mul_ln59_fu_331_p2 = (16'd122 * mul_ln59_fu_331_p1);

assign out_channels_ch1_address0 = zext_ln54_1_reg_637_pp0_iter5_reg;

assign out_channels_ch1_d0 = (8'd16 + trunc_ln_reg_686);

assign out_channels_ch2_address0 = zext_ln54_1_reg_637_pp0_iter5_reg;

assign out_channels_ch2_d0 = (trunc_ln5_fu_533_p4 ^ 8'd128);

assign out_channels_ch3_address0 = zext_ln54_1_reg_637_pp0_iter5_reg;

assign out_channels_ch3_d0 = (trunc_ln6_reg_701 ^ 8'd128);

assign select_ln54_1_fu_267_p3 = ((icmp_ln48_fu_254_p2[0:0] === 1'b1) ? x_fu_248_p2 : ap_phi_mux_x_0_phi_fu_211_p4);

assign select_ln54_fu_259_p3 = ((icmp_ln48_fu_254_p2[0:0] === 1'b1) ? 16'd0 : y_0_reg_218);

assign sext_ln59_1_fu_498_p1 = $signed(add_ln59_1_fu_492_p2);

assign sext_ln59_fu_471_p1 = $signed(sub_ln59_fu_465_p2);

assign shl_ln1_fu_433_p3 = {{B_reg_673}, {7'd0}};

assign shl_ln2_fu_475_p3 = {{B_reg_673}, {1'd0}};

assign shl_ln57_1_fu_351_p3 = {{R_reg_659}, {1'd0}};

assign shl_ln57_2_fu_368_p3 = {{G_reg_666}, {7'd0}};

assign shl_ln58_1_fu_444_p3 = {{B_reg_673}, {4'd0}};

assign shl_ln_fu_340_p3 = {{R_reg_659}, {6'd0}};

assign sub_ln58_fu_459_p2 = (zext_ln58_fu_440_p1 - zext_ln58_2_fu_455_p1);

assign sub_ln59_1_fu_486_p2 = ($signed(sext_ln59_fu_471_p1) - $signed(zext_ln59_fu_482_p1));

assign sub_ln59_fu_465_p2 = (13'd0 - zext_ln58_1_fu_451_p1);

assign trunc_ln54_1_fu_287_p1 = select_ln54_1_fu_267_p3[14:0];

assign trunc_ln54_fu_275_p1 = select_ln54_1_fu_267_p3[12:0];

assign trunc_ln5_fu_533_p4 = {{add_ln58_2_fu_528_p2[15:8]}};

assign x_fu_248_p2 = (16'd1 + ap_phi_mux_x_0_phi_fu_211_p4);

assign y_fu_315_p2 = (16'd1 + select_ln54_fu_259_p3);

assign zext_ln54_1_fu_321_p1 = add_ln54_1_reg_627;

assign zext_ln54_2_cast_fu_291_p3 = {{trunc_ln54_1_fu_287_p1}, {8'd0}};

assign zext_ln54_cast_fu_279_p3 = {{trunc_ln54_fu_275_p1}, {10'd0}};

assign zext_ln54_fu_305_p1 = select_ln54_fu_259_p3;

assign zext_ln57_10_fu_408_p1 = grp_fu_572_p3;

assign zext_ln57_2_fu_347_p1 = shl_ln_fu_340_p3;

assign zext_ln57_3_fu_358_p1 = shl_ln57_1_fu_351_p3;

assign zext_ln57_4_fu_362_p1 = G_reg_666;

assign zext_ln57_5_fu_365_p1 = G_reg_666;

assign zext_ln57_6_fu_375_p1 = shl_ln57_2_fu_368_p3;

assign zext_ln57_8_fu_388_p1 = add_ln57_fu_382_p2;

assign zext_ln58_1_fu_451_p1 = shl_ln58_1_fu_444_p3;

assign zext_ln58_2_fu_455_p1 = shl_ln58_1_fu_444_p3;

assign zext_ln58_fu_440_p1 = shl_ln1_fu_433_p3;

assign zext_ln59_fu_482_p1 = shl_ln2_fu_475_p3;

always @ (posedge ap_clk) begin
    zext_ln54_1_reg_637[63:23] <= 41'b00000000000000000000000000000000000000000;
    zext_ln54_1_reg_637_pp0_iter2_reg[63:23] <= 41'b00000000000000000000000000000000000000000;
    zext_ln54_1_reg_637_pp0_iter3_reg[63:23] <= 41'b00000000000000000000000000000000000000000;
    zext_ln54_1_reg_637_pp0_iter4_reg[63:23] <= 41'b00000000000000000000000000000000000000000;
    zext_ln54_1_reg_637_pp0_iter5_reg[63:23] <= 41'b00000000000000000000000000000000000000000;
    sub_ln58_reg_691[3:0] <= 4'b0000;
end

endmodule //rgb2yuv
