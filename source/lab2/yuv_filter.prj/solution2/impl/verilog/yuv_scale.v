// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_scale (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width_read,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        Y_scale,
        U_scale,
        V_scale,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width_read;
input  [15:0] in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
input  [7:0] Y_scale;
input  [7:0] U_scale;
input  [7:0] V_scale;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] indvar_flatten_reg_184;
reg   [15:0] x_0_reg_195;
reg   [15:0] y_0_reg_206;
wire   [14:0] zext_ln138_fu_217_p1;
reg   [14:0] zext_ln138_reg_411;
wire   [14:0] zext_ln139_fu_221_p1;
reg   [14:0] zext_ln139_reg_416;
wire   [14:0] zext_ln129_fu_225_p1;
reg   [14:0] zext_ln129_reg_421;
wire   [31:0] mul_ln111_fu_394_p2;
reg   [31:0] mul_ln111_reg_426;
wire   [0:0] icmp_ln129_fu_237_p2;
reg   [0:0] icmp_ln129_reg_431;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln129_reg_431_pp0_iter1_reg;
reg   [0:0] icmp_ln129_reg_431_pp0_iter2_reg;
reg   [0:0] icmp_ln129_reg_431_pp0_iter3_reg;
reg   [0:0] icmp_ln129_reg_431_pp0_iter4_reg;
wire   [31:0] add_ln129_fu_242_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] select_ln134_1_fu_267_p3;
reg   [15:0] select_ln134_1_reg_440;
wire   [22:0] add_ln134_1_fu_309_p2;
reg   [22:0] add_ln134_1_reg_445;
wire   [15:0] y_fu_315_p2;
wire   [63:0] zext_ln134_1_fu_321_p1;
reg   [63:0] zext_ln134_1_reg_455;
reg   [63:0] zext_ln134_1_reg_455_pp0_iter2_reg;
reg   [63:0] zext_ln134_1_reg_455_pp0_iter3_reg;
reg   [63:0] zext_ln134_1_reg_455_pp0_iter4_reg;
reg   [7:0] trunc_ln_reg_477;
reg   [7:0] trunc_ln1_reg_482;
reg   [7:0] trunc_ln2_reg_487;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [15:0] ap_phi_mux_x_0_phi_fu_199_p4;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln132_fu_254_p2;
wire   [15:0] x_fu_248_p2;
wire   [12:0] trunc_ln134_fu_275_p1;
wire   [14:0] trunc_ln134_1_fu_287_p1;
wire   [22:0] zext_ln134_cast_fu_279_p3;
wire   [22:0] zext_ln134_2_cast_fu_291_p3;
wire   [15:0] select_ln134_fu_259_p3;
wire   [22:0] zext_ln134_fu_305_p1;
wire   [22:0] add_ln134_fu_299_p2;
wire   [7:0] mul_ln137_fu_331_p0;
wire   [7:0] mul_ln137_fu_331_p1;
wire   [7:0] mul_ln138_fu_340_p0;
wire   [7:0] mul_ln138_fu_340_p1;
wire   [7:0] mul_ln139_fu_349_p0;
wire   [7:0] mul_ln139_fu_349_p1;
wire   [14:0] mul_ln137_fu_331_p2;
wire   [14:0] mul_ln138_fu_340_p2;
wire   [14:0] mul_ln139_fu_349_p2;
wire    ap_CS_fsm_state9;
wire   [15:0] mul_ln111_fu_394_p0;
wire   [15:0] mul_ln111_fu_394_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] mul_ln111_fu_394_p00;
wire   [31:0] mul_ln111_fu_394_p10;
wire   [14:0] mul_ln137_fu_331_p00;
wire   [14:0] mul_ln138_fu_340_p00;
wire   [14:0] mul_ln139_fu_349_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

yuv_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yuv_filter_mul_mubkb_U17(
    .din0(mul_ln111_fu_394_p0),
    .din1(mul_ln111_fu_394_p1),
    .dout(mul_ln111_fu_394_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_184 <= add_ln129_fu_242_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_184 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_reg_431 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_0_reg_195 <= select_ln134_1_reg_440;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_reg_195 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_0_reg_206 <= y_fu_315_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_0_reg_206 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln134_1_reg_445 <= add_ln134_1_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln129_reg_431 <= icmp_ln129_fu_237_p2;
        icmp_ln129_reg_431_pp0_iter1_reg <= icmp_ln129_reg_431;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln129_reg_431_pp0_iter2_reg <= icmp_ln129_reg_431_pp0_iter1_reg;
        icmp_ln129_reg_431_pp0_iter3_reg <= icmp_ln129_reg_431_pp0_iter2_reg;
        icmp_ln129_reg_431_pp0_iter4_reg <= icmp_ln129_reg_431_pp0_iter3_reg;
        zext_ln134_1_reg_455_pp0_iter2_reg[22 : 0] <= zext_ln134_1_reg_455[22 : 0];
        zext_ln134_1_reg_455_pp0_iter3_reg[22 : 0] <= zext_ln134_1_reg_455_pp0_iter2_reg[22 : 0];
        zext_ln134_1_reg_455_pp0_iter4_reg[22 : 0] <= zext_ln134_1_reg_455_pp0_iter3_reg[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln111_reg_426 <= mul_ln111_fu_394_p2;
        zext_ln129_reg_421[7 : 0] <= zext_ln129_fu_225_p1[7 : 0];
        zext_ln138_reg_411[7 : 0] <= zext_ln138_fu_217_p1[7 : 0];
        zext_ln139_reg_416[7 : 0] <= zext_ln139_fu_221_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln134_1_reg_440 <= select_ln134_1_fu_267_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_reg_431_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln1_reg_482 <= {{mul_ln138_fu_340_p2[14:7]}};
        trunc_ln2_reg_487 <= {{mul_ln139_fu_349_p2[14:7]}};
        trunc_ln_reg_477 <= {{mul_ln137_fu_331_p2[14:7]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_reg_431 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln134_1_reg_455[22 : 0] <= zext_ln134_1_fu_321_p1[22 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln129_fu_237_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_431 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_x_0_phi_fu_199_p4 = select_ln134_1_reg_440;
    end else begin
        ap_phi_mux_x_0_phi_fu_199_p4 = x_0_reg_195;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln129_reg_431_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln129_reg_431_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln129_reg_431_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln129_fu_237_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln129_fu_237_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln129_fu_242_p2 = (indvar_flatten_reg_184 + 32'd1);

assign add_ln134_1_fu_309_p2 = (zext_ln134_fu_305_p1 + add_ln134_fu_299_p2);

assign add_ln134_fu_299_p2 = (zext_ln134_cast_fu_279_p3 + zext_ln134_2_cast_fu_291_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = in_width_read;

assign ap_return_1 = in_height_read;

assign icmp_ln129_fu_237_p2 = ((indvar_flatten_reg_184 == mul_ln111_reg_426) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_254_p2 = ((y_0_reg_206 == in_height_read) ? 1'b1 : 1'b0);

assign in_channels_ch1_address0 = zext_ln134_1_fu_321_p1;

assign in_channels_ch2_address0 = zext_ln134_1_fu_321_p1;

assign in_channels_ch3_address0 = zext_ln134_1_fu_321_p1;

assign mul_ln111_fu_394_p0 = mul_ln111_fu_394_p00;

assign mul_ln111_fu_394_p00 = in_height_read;

assign mul_ln111_fu_394_p1 = mul_ln111_fu_394_p10;

assign mul_ln111_fu_394_p10 = in_width_read;

assign mul_ln137_fu_331_p0 = mul_ln137_fu_331_p00;

assign mul_ln137_fu_331_p00 = in_channels_ch1_q0;

assign mul_ln137_fu_331_p1 = zext_ln138_reg_411;

assign mul_ln137_fu_331_p2 = (mul_ln137_fu_331_p0 * mul_ln137_fu_331_p1);

assign mul_ln138_fu_340_p0 = mul_ln138_fu_340_p00;

assign mul_ln138_fu_340_p00 = in_channels_ch2_q0;

assign mul_ln138_fu_340_p1 = zext_ln139_reg_416;

assign mul_ln138_fu_340_p2 = (mul_ln138_fu_340_p0 * mul_ln138_fu_340_p1);

assign mul_ln139_fu_349_p0 = mul_ln139_fu_349_p00;

assign mul_ln139_fu_349_p00 = in_channels_ch3_q0;

assign mul_ln139_fu_349_p1 = zext_ln129_reg_421;

assign mul_ln139_fu_349_p2 = (mul_ln139_fu_349_p0 * mul_ln139_fu_349_p1);

assign out_channels_ch1_address0 = zext_ln134_1_reg_455_pp0_iter4_reg;

assign out_channels_ch1_d0 = trunc_ln_reg_477;

assign out_channels_ch2_address0 = zext_ln134_1_reg_455_pp0_iter4_reg;

assign out_channels_ch2_d0 = trunc_ln1_reg_482;

assign out_channels_ch3_address0 = zext_ln134_1_reg_455_pp0_iter4_reg;

assign out_channels_ch3_d0 = trunc_ln2_reg_487;

assign select_ln134_1_fu_267_p3 = ((icmp_ln132_fu_254_p2[0:0] === 1'b1) ? x_fu_248_p2 : ap_phi_mux_x_0_phi_fu_199_p4);

assign select_ln134_fu_259_p3 = ((icmp_ln132_fu_254_p2[0:0] === 1'b1) ? 16'd0 : y_0_reg_206);

assign trunc_ln134_1_fu_287_p1 = select_ln134_1_fu_267_p3[14:0];

assign trunc_ln134_fu_275_p1 = select_ln134_1_fu_267_p3[12:0];

assign x_fu_248_p2 = (16'd1 + ap_phi_mux_x_0_phi_fu_199_p4);

assign y_fu_315_p2 = (16'd1 + select_ln134_fu_259_p3);

assign zext_ln129_fu_225_p1 = V_scale;

assign zext_ln134_1_fu_321_p1 = add_ln134_1_reg_445;

assign zext_ln134_2_cast_fu_291_p3 = {{trunc_ln134_1_fu_287_p1}, {8'd0}};

assign zext_ln134_cast_fu_279_p3 = {{trunc_ln134_fu_275_p1}, {10'd0}};

assign zext_ln134_fu_305_p1 = select_ln134_fu_259_p3;

assign zext_ln138_fu_217_p1 = Y_scale;

assign zext_ln139_fu_221_p1 = U_scale;

always @ (posedge ap_clk) begin
    zext_ln138_reg_411[14:8] <= 7'b0000000;
    zext_ln139_reg_416[14:8] <= 7'b0000000;
    zext_ln129_reg_421[14:8] <= 7'b0000000;
    zext_ln134_1_reg_455[63:23] <= 41'b00000000000000000000000000000000000000000;
    zext_ln134_1_reg_455_pp0_iter2_reg[63:23] <= 41'b00000000000000000000000000000000000000000;
    zext_ln134_1_reg_455_pp0_iter3_reg[63:23] <= 41'b00000000000000000000000000000000000000000;
    zext_ln134_1_reg_455_pp0_iter4_reg[63:23] <= 41'b00000000000000000000000000000000000000000;
end

endmodule //yuv_scale
