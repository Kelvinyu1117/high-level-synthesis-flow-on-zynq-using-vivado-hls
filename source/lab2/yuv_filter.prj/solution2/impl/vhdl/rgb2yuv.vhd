-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rgb2yuv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of rgb2yuv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_7A : STD_LOGIC_VECTOR (15 downto 0) := "0000000001111010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_FFB6 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110110110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_80 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv15_7FDA : STD_LOGIC_VECTOR (14 downto 0) := "111111111011010";
    constant ap_const_lv16_FFA2 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110100010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_0_reg_207 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_0_reg_218 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln30_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln45_reg_613_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_613_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_613_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_613_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_613_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln45_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln54_1_fu_267_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln54_1_reg_622 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln54_1_fu_309_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln54_1_reg_627 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_fu_315_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln54_1_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_637_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_637_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_637_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_637_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal R_reg_659 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_666 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_673 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln59_fu_331_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln59_reg_681 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_686 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln58_fu_459_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln58_reg_691 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_581_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_reg_696 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal trunc_ln6_reg_701 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_phi_mux_x_0_phi_fu_211_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln48_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_248_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln54_fu_275_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln54_1_fu_287_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln54_cast_fu_279_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln54_2_cast_fu_291_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln54_fu_259_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln54_fu_305_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln54_fu_299_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln59_fu_331_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_340_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln57_1_fu_351_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln57_2_fu_368_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln57_3_fu_358_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln57_2_fu_347_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln57_fu_382_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln57_8_fu_388_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln57_6_fu_375_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln57_5_fu_365_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_3_fu_398_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_572_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln57_10_fu_408_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln57_1_fu_392_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln57_2_fu_411_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln58_1_fu_427_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln57_4_fu_362_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1_fu_433_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln58_1_fu_444_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln58_fu_440_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln58_2_fu_455_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln58_1_fu_451_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln59_fu_465_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln2_fu_475_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln59_fu_471_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln59_fu_482_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln59_1_fu_486_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln59_1_fu_492_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln59_1_fu_498_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_589_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln59_2_fu_502_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln59_2_fu_502_p2 : signal is "no";
    signal add_ln58_1_fu_523_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_2_fu_528_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln58_2_fu_528_p2 : signal is "no";
    signal trunc_ln5_fu_533_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal mul_ln30_fu_566_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln30_fu_566_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_572_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_572_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_572_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_581_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_581_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_581_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_589_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_589_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_572_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_572_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_581_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln30_fu_566_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_fu_566_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln59_fu_331_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component yuv_filter_mul_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component yuv_filter_mac_mucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component yuv_filter_mac_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mac_mueOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    yuv_filter_mul_mubkb_U1 : component yuv_filter_mul_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln30_fu_566_p0,
        din1 => mul_ln30_fu_566_p1,
        dout => mul_ln30_fu_566_p2);

    yuv_filter_mac_mucud_U2 : component yuv_filter_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_572_p0,
        din1 => grp_fu_572_p1,
        din2 => grp_fu_572_p2,
        dout => grp_fu_572_p3);

    yuv_filter_mac_mudEe_U3 : component yuv_filter_mac_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_581_p0,
        din1 => grp_fu_581_p1,
        din2 => grp_fu_581_p2,
        dout => grp_fu_581_p3);

    yuv_filter_mac_mueOg_U4 : component yuv_filter_mac_mueOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_589_p0,
        din1 => grp_fu_589_p1,
        din2 => mul_ln59_reg_681,
        dout => grp_fu_589_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_196 <= add_ln45_fu_242_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_196 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_613 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                x_0_reg_207 <= select_ln54_1_reg_622;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_0_reg_207 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_0_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                y_0_reg_218 <= y_fu_315_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_0_reg_218 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_613_pp0_iter3_reg = ap_const_lv1_0))) then
                B_reg_673 <= in_channels_ch3_q0;
                G_reg_666 <= in_channels_ch2_q0;
                R_reg_659 <= in_channels_ch1_q0;
                mul_ln59_reg_681 <= mul_ln59_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln54_1_reg_627 <= add_ln54_1_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln45_reg_613_pp0_iter4_reg = ap_const_lv1_0))) then
                add_ln58_reg_696 <= grp_fu_581_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln45_reg_613 <= icmp_ln45_fu_237_p2;
                icmp_ln45_reg_613_pp0_iter1_reg <= icmp_ln45_reg_613;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln45_reg_613_pp0_iter2_reg <= icmp_ln45_reg_613_pp0_iter1_reg;
                icmp_ln45_reg_613_pp0_iter3_reg <= icmp_ln45_reg_613_pp0_iter2_reg;
                icmp_ln45_reg_613_pp0_iter4_reg <= icmp_ln45_reg_613_pp0_iter3_reg;
                icmp_ln45_reg_613_pp0_iter5_reg <= icmp_ln45_reg_613_pp0_iter4_reg;
                    zext_ln54_1_reg_637_pp0_iter2_reg(22 downto 0) <= zext_ln54_1_reg_637(22 downto 0);
                    zext_ln54_1_reg_637_pp0_iter3_reg(22 downto 0) <= zext_ln54_1_reg_637_pp0_iter2_reg(22 downto 0);
                    zext_ln54_1_reg_637_pp0_iter4_reg(22 downto 0) <= zext_ln54_1_reg_637_pp0_iter3_reg(22 downto 0);
                    zext_ln54_1_reg_637_pp0_iter5_reg(22 downto 0) <= zext_ln54_1_reg_637_pp0_iter4_reg(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mul_ln30_reg_608 <= mul_ln30_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln54_1_reg_622 <= select_ln54_1_fu_267_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_613_pp0_iter4_reg = ap_const_lv1_0))) then
                    sub_ln58_reg_691(15 downto 4) <= sub_ln58_fu_459_p2(15 downto 4);
                trunc_ln6_reg_701 <= add_ln59_2_fu_502_p2(15 downto 8);
                trunc_ln_reg_686 <= add_ln57_2_fu_411_p2(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_613 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln54_1_reg_637(22 downto 0) <= zext_ln54_1_fu_321_p1(22 downto 0);
            end if;
        end if;
    end process;
    zext_ln54_1_reg_637(63 downto 23) <= "00000000000000000000000000000000000000000";
    zext_ln54_1_reg_637_pp0_iter2_reg(63 downto 23) <= "00000000000000000000000000000000000000000";
    zext_ln54_1_reg_637_pp0_iter3_reg(63 downto 23) <= "00000000000000000000000000000000000000000";
    zext_ln54_1_reg_637_pp0_iter4_reg(63 downto 23) <= "00000000000000000000000000000000000000000";
    zext_ln54_1_reg_637_pp0_iter5_reg(63 downto 23) <= "00000000000000000000000000000000000000000";
    sub_ln58_reg_691(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln45_fu_237_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln45_fu_237_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln45_fu_237_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln45_fu_242_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_196) + unsigned(ap_const_lv32_1));
    add_ln54_1_fu_309_p2 <= std_logic_vector(unsigned(zext_ln54_fu_305_p1) + unsigned(add_ln54_fu_299_p2));
    add_ln54_fu_299_p2 <= std_logic_vector(unsigned(zext_ln54_cast_fu_279_p3) + unsigned(zext_ln54_2_cast_fu_291_p3));
    add_ln57_1_fu_392_p2 <= std_logic_vector(unsigned(zext_ln57_8_fu_388_p1) + unsigned(zext_ln57_6_fu_375_p1));
    add_ln57_2_fu_411_p2 <= std_logic_vector(unsigned(zext_ln57_10_fu_408_p1) + unsigned(add_ln57_1_fu_392_p2));
    add_ln57_3_fu_398_p2 <= std_logic_vector(unsigned(ap_const_lv9_80) + unsigned(zext_ln57_5_fu_365_p1));
    add_ln57_fu_382_p2 <= std_logic_vector(unsigned(zext_ln57_3_fu_358_p1) + unsigned(zext_ln57_2_fu_347_p1));
    add_ln58_1_fu_523_p2 <= std_logic_vector(unsigned(ap_const_lv16_80) + unsigned(sub_ln58_reg_691));
    add_ln58_2_fu_528_p2 <= std_logic_vector(unsigned(add_ln58_1_fu_523_p2) + unsigned(add_ln58_reg_696));
    add_ln59_1_fu_492_p2 <= std_logic_vector(unsigned(ap_const_lv14_80) + unsigned(sub_ln59_1_fu_486_p2));
    add_ln59_2_fu_502_p2 <= std_logic_vector(signed(sext_ln59_1_fu_498_p1) + signed(grp_fu_589_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln45_fu_237_p2)
    begin
        if ((icmp_ln45_fu_237_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_x_0_phi_fu_211_p4_assign_proc : process(x_0_reg_207, icmp_ln45_reg_613, ap_CS_fsm_pp0_stage0, select_ln54_1_reg_622, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln45_reg_613 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_x_0_phi_fu_211_p4 <= select_ln54_1_reg_622;
        else 
            ap_phi_mux_x_0_phi_fu_211_p4 <= x_0_reg_207;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= in_width_read;
    ap_return_1 <= in_height_read;
    grp_fu_572_p0 <= ap_const_lv13_19(6 - 1 downto 0);
    grp_fu_572_p1 <= grp_fu_572_p10(8 - 1 downto 0);
    grp_fu_572_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_reg_673),13));
    grp_fu_572_p2 <= grp_fu_572_p20(9 - 1 downto 0);
    grp_fu_572_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_3_fu_398_p2),13));
    grp_fu_581_p0 <= ap_const_lv15_7FDA(7 - 1 downto 0);
    grp_fu_581_p1 <= grp_fu_581_p10(8 - 1 downto 0);
    grp_fu_581_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(R_reg_659),15));
    grp_fu_581_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv16_FFB6) * signed('0' &mul_ln58_1_fu_427_p1))), 16));
    grp_fu_589_p0 <= ap_const_lv16_FFA2(8 - 1 downto 0);
    grp_fu_589_p1 <= zext_ln57_4_fu_362_p1(8 - 1 downto 0);
    icmp_ln45_fu_237_p2 <= "1" when (indvar_flatten_reg_196 = mul_ln30_reg_608) else "0";
    icmp_ln48_fu_254_p2 <= "1" when (y_0_reg_218 = in_height_read) else "0";
    in_channels_ch1_address0 <= zext_ln54_1_fu_321_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= zext_ln54_1_fu_321_p1(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= zext_ln54_1_fu_321_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln30_fu_566_p0 <= mul_ln30_fu_566_p00(16 - 1 downto 0);
    mul_ln30_fu_566_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_height_read),32));
    mul_ln30_fu_566_p1 <= mul_ln30_fu_566_p10(16 - 1 downto 0);
    mul_ln30_fu_566_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_width_read),32));
    mul_ln58_1_fu_427_p1 <= zext_ln57_4_fu_362_p1(8 - 1 downto 0);
    mul_ln59_fu_331_p1 <= mul_ln59_fu_331_p10(8 - 1 downto 0);
    mul_ln59_fu_331_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels_ch1_q0),16));
    mul_ln59_fu_331_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv16_7A) * unsigned(mul_ln59_fu_331_p1), 16));
    out_channels_ch1_address0 <= zext_ln54_1_reg_637_pp0_iter5_reg(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= std_logic_vector(unsigned(ap_const_lv8_10) + unsigned(trunc_ln_reg_686));

    out_channels_ch1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln45_reg_613_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln45_reg_613_pp0_iter5_reg = ap_const_lv1_0))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= zext_ln54_1_reg_637_pp0_iter5_reg(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= (trunc_ln5_fu_533_p4 xor ap_const_lv8_80);

    out_channels_ch2_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln45_reg_613_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln45_reg_613_pp0_iter5_reg = ap_const_lv1_0))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= zext_ln54_1_reg_637_pp0_iter5_reg(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= (trunc_ln6_reg_701 xor ap_const_lv8_80);

    out_channels_ch3_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln45_reg_613_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln45_reg_613_pp0_iter5_reg = ap_const_lv1_0))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln54_1_fu_267_p3 <= 
        x_fu_248_p2 when (icmp_ln48_fu_254_p2(0) = '1') else 
        ap_phi_mux_x_0_phi_fu_211_p4;
    select_ln54_fu_259_p3 <= 
        ap_const_lv16_0 when (icmp_ln48_fu_254_p2(0) = '1') else 
        y_0_reg_218;
        sext_ln59_1_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln59_1_fu_492_p2),16));

        sext_ln59_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln59_fu_465_p2),14));

    shl_ln1_fu_433_p3 <= (B_reg_673 & ap_const_lv7_0);
    shl_ln2_fu_475_p3 <= (B_reg_673 & ap_const_lv1_0);
    shl_ln57_1_fu_351_p3 <= (R_reg_659 & ap_const_lv1_0);
    shl_ln57_2_fu_368_p3 <= (G_reg_666 & ap_const_lv7_0);
    shl_ln58_1_fu_444_p3 <= (B_reg_673 & ap_const_lv4_0);
    shl_ln_fu_340_p3 <= (R_reg_659 & ap_const_lv6_0);
    sub_ln58_fu_459_p2 <= std_logic_vector(unsigned(zext_ln58_fu_440_p1) - unsigned(zext_ln58_2_fu_455_p1));
    sub_ln59_1_fu_486_p2 <= std_logic_vector(signed(sext_ln59_fu_471_p1) - signed(zext_ln59_fu_482_p1));
    sub_ln59_fu_465_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(zext_ln58_1_fu_451_p1));
    trunc_ln54_1_fu_287_p1 <= select_ln54_1_fu_267_p3(15 - 1 downto 0);
    trunc_ln54_fu_275_p1 <= select_ln54_1_fu_267_p3(13 - 1 downto 0);
    trunc_ln5_fu_533_p4 <= add_ln58_2_fu_528_p2(15 downto 8);
    x_fu_248_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(ap_phi_mux_x_0_phi_fu_211_p4));
    y_fu_315_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(select_ln54_fu_259_p3));
    zext_ln54_1_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_1_reg_627),64));
    zext_ln54_2_cast_fu_291_p3 <= (trunc_ln54_1_fu_287_p1 & ap_const_lv8_0);
    zext_ln54_cast_fu_279_p3 <= (trunc_ln54_fu_275_p1 & ap_const_lv10_0);
    zext_ln54_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_fu_259_p3),23));
    zext_ln57_10_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_572_p3),16));
    zext_ln57_2_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_340_p3),15));
    zext_ln57_3_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln57_1_fu_351_p3),15));
    zext_ln57_4_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_reg_666),16));
    zext_ln57_5_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_reg_666),9));
    zext_ln57_6_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln57_2_fu_368_p3),16));
    zext_ln57_8_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_382_p2),16));
    zext_ln58_1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln58_1_fu_444_p3),13));
    zext_ln58_2_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln58_1_fu_444_p3),16));
    zext_ln58_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_433_p3),16));
    zext_ln59_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_475_p3),14));
end behav;
