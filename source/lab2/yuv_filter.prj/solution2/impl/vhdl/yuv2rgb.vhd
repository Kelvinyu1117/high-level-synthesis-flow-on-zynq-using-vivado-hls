-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv2rgb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv2rgb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv17_1FF30 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100110000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv18_12A : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101010";
    constant ap_const_lv18_80 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_const_lv18_199 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011001";
    constant ap_const_lv16_FF9C : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_0_reg_213 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_0_reg_224 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln68_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln85_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_642 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln85_reg_642_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_642_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_642_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_642_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_642_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln85_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln94_1_fu_273_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln94_1_reg_651 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln94_1_fu_315_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln94_1_reg_656 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_fu_321_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln94_1_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_reg_666 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_reg_666_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_reg_666_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_reg_666_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_reg_666_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal C_fu_337_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal C_reg_688 : STD_LOGIC_VECTOR (8 downto 0);
    signal D_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_693 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_693_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal E_fu_349_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_reg_700 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln101_1_fu_359_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln101_1_reg_705 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_609_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln100_1_reg_710 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal icmp_ln100_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal G_fu_445_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_722 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln102_1_fu_464_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln102_1_fu_464_p2 : signal is "no";
    signal add_ln102_1_reg_727 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_phi_mux_x_0_phi_fu_217_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln88_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_254_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln94_fu_281_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln94_1_fu_293_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln94_2_cast_fu_297_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln94_cast_fu_285_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln94_fu_265_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln94_fu_305_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln94_fu_311_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln97_fu_333_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln101_1_fu_359_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_371_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_618_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_599_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln101_2_fu_389_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln101_1_fu_392_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 of add_ln101_1_fu_392_p2 : signal is "no";
    signal tmp_3_fu_397_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln101_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_413_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln101_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln101_fu_431_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln3_fu_421_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln102_1_fu_453_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln102_1_fu_460_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_fu_469_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln100_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln100_fu_485_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_fu_476_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_506_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln102_fu_513_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln102_2_fu_517_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln102_fu_520_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_5_fu_526_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln102_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_542_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln102_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln102_fu_560_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln4_fu_550_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal mul_ln68_fu_593_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln68_fu_593_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_599_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_599_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_609_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_618_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln68_fu_593_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_fu_593_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component yuv_filter_mul_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component yuv_filter_mac_mufYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_mug8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_muhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    yuv_filter_mul_mubkb_U29 : component yuv_filter_mul_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln68_fu_593_p0,
        din1 => mul_ln68_fu_593_p1,
        dout => mul_ln68_fu_593_p2);

    yuv_filter_mac_mufYi_U30 : component yuv_filter_mac_mufYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_599_p0,
        din1 => C_reg_688,
        din2 => grp_fu_599_p2,
        dout => grp_fu_599_p3);

    yuv_filter_mac_mug8j_U31 : component yuv_filter_mac_mug8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_609_p0,
        din1 => E_reg_700,
        din2 => grp_fu_599_p3,
        dout => grp_fu_609_p3);

    yuv_filter_mac_muhbi_U32 : component yuv_filter_mac_muhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_618_p0,
        din1 => D_reg_693,
        din2 => mul_ln101_1_reg_705,
        dout => grp_fu_618_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln85_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_202 <= add_ln85_fu_248_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_202 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_0_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln85_reg_642 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                x_0_reg_213 <= select_ln94_1_reg_651;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_0_reg_213 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_0_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln85_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                y_0_reg_224 <= y_fu_321_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_0_reg_224 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln85_reg_642_pp0_iter3_reg = ap_const_lv1_0))) then
                C_reg_688 <= C_fu_337_p2;
                D_reg_693 <= D_fu_343_p2;
                E_reg_700 <= E_fu_349_p2;
                mul_ln101_1_reg_705 <= mul_ln101_1_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                D_reg_693_pp0_iter5_reg <= D_reg_693;
                icmp_ln85_reg_642_pp0_iter2_reg <= icmp_ln85_reg_642_pp0_iter1_reg;
                icmp_ln85_reg_642_pp0_iter3_reg <= icmp_ln85_reg_642_pp0_iter2_reg;
                icmp_ln85_reg_642_pp0_iter4_reg <= icmp_ln85_reg_642_pp0_iter3_reg;
                icmp_ln85_reg_642_pp0_iter5_reg <= icmp_ln85_reg_642_pp0_iter4_reg;
                    zext_ln94_1_reg_666_pp0_iter2_reg(22 downto 0) <= zext_ln94_1_reg_666(22 downto 0);
                    zext_ln94_1_reg_666_pp0_iter3_reg(22 downto 0) <= zext_ln94_1_reg_666_pp0_iter2_reg(22 downto 0);
                    zext_ln94_1_reg_666_pp0_iter4_reg(22 downto 0) <= zext_ln94_1_reg_666_pp0_iter3_reg(22 downto 0);
                    zext_ln94_1_reg_666_pp0_iter5_reg(22 downto 0) <= zext_ln94_1_reg_666_pp0_iter4_reg(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln85_reg_642_pp0_iter4_reg = ap_const_lv1_0))) then
                G_reg_722 <= G_fu_445_p3;
                add_ln102_1_reg_727 <= add_ln102_1_fu_464_p2;
                icmp_ln100_reg_716 <= icmp_ln100_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln85_reg_642_pp0_iter4_reg = ap_const_lv1_0))) then
                add_ln100_1_reg_710 <= grp_fu_609_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln85_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln94_1_reg_656 <= add_ln94_1_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln85_reg_642 <= icmp_ln85_fu_243_p2;
                icmp_ln85_reg_642_pp0_iter1_reg <= icmp_ln85_reg_642;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mul_ln68_reg_637 <= mul_ln68_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln85_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln94_1_reg_651 <= select_ln94_1_fu_273_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln85_reg_642 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln94_1_reg_666(22 downto 0) <= zext_ln94_1_fu_327_p1(22 downto 0);
            end if;
        end if;
    end process;
    zext_ln94_1_reg_666(63 downto 23) <= "00000000000000000000000000000000000000000";
    zext_ln94_1_reg_666_pp0_iter2_reg(63 downto 23) <= "00000000000000000000000000000000000000000";
    zext_ln94_1_reg_666_pp0_iter3_reg(63 downto 23) <= "00000000000000000000000000000000000000000";
    zext_ln94_1_reg_666_pp0_iter4_reg(63 downto 23) <= "00000000000000000000000000000000000000000";
    zext_ln94_1_reg_666_pp0_iter5_reg(63 downto 23) <= "00000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln85_fu_243_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln85_fu_243_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln85_fu_243_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    C_fu_337_p2 <= std_logic_vector(signed(ap_const_lv9_1F0) + signed(zext_ln97_fu_333_p1));
    D_fu_343_p2 <= (in_channels_ch2_q0 xor ap_const_lv8_80);
    E_fu_349_p2 <= (in_channels_ch3_q0 xor ap_const_lv8_80);
    G_fu_445_p3 <= 
        select_ln101_fu_431_p3 when (or_ln101_fu_439_p2(0) = '1') else 
        trunc_ln3_fu_421_p4;
    add_ln101_1_fu_392_p2 <= std_logic_vector(signed(grp_fu_599_p3) + signed(sext_ln101_2_fu_389_p1));
    add_ln102_1_fu_464_p2 <= std_logic_vector(signed(grp_fu_599_p3) + signed(sext_ln102_1_fu_460_p1));
    add_ln102_fu_520_p2 <= std_logic_vector(signed(sext_ln102_fu_513_p1) + signed(sext_ln102_2_fu_517_p1));
    add_ln85_fu_248_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_202) + unsigned(ap_const_lv32_1));
    add_ln94_1_fu_315_p2 <= std_logic_vector(unsigned(add_ln94_fu_305_p2) + unsigned(zext_ln94_fu_311_p1));
    add_ln94_fu_305_p2 <= std_logic_vector(unsigned(zext_ln94_2_cast_fu_297_p3) + unsigned(zext_ln94_cast_fu_285_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln85_fu_243_p2)
    begin
        if ((icmp_ln85_fu_243_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_x_0_phi_fu_217_p4_assign_proc : process(x_0_reg_213, icmp_ln85_reg_642, ap_CS_fsm_pp0_stage0, select_ln94_1_reg_651, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln85_reg_642 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_x_0_phi_fu_217_p4 <= select_ln94_1_reg_651;
        else 
            ap_phi_mux_x_0_phi_fu_217_p4 <= x_0_reg_213;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= in_width_read;
    ap_return_1 <= in_height_read;
    grp_fu_599_p0 <= ap_const_lv18_12A(10 - 1 downto 0);
    grp_fu_599_p2 <= ap_const_lv18_80(9 - 1 downto 0);
    grp_fu_609_p0 <= ap_const_lv18_199(10 - 1 downto 0);
    grp_fu_618_p0 <= ap_const_lv16_FF9C(8 - 1 downto 0);
    icmp_ln100_fu_380_p2 <= "1" when (tmp_fu_371_p4 = ap_const_lv2_1) else "0";
    icmp_ln101_fu_407_p2 <= "1" when (tmp_3_fu_397_p4 = ap_const_lv2_1) else "0";
    icmp_ln102_fu_536_p2 <= "1" when (signed(tmp_5_fu_526_p4) > signed(ap_const_lv3_0)) else "0";
    icmp_ln85_fu_243_p2 <= "1" when (indvar_flatten_reg_202 = mul_ln68_reg_637) else "0";
    icmp_ln88_fu_260_p2 <= "1" when (y_0_reg_224 = in_height_read) else "0";
    in_channels_ch1_address0 <= zext_ln94_1_fu_327_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= zext_ln94_1_fu_327_p1(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= zext_ln94_1_fu_327_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln101_1_fu_359_p1 <= E_fu_349_p2;
    mul_ln101_1_fu_359_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv17_1FF30) * signed(mul_ln101_1_fu_359_p1))), 17));
    mul_ln68_fu_593_p0 <= mul_ln68_fu_593_p00(16 - 1 downto 0);
    mul_ln68_fu_593_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_height_read),32));
    mul_ln68_fu_593_p1 <= mul_ln68_fu_593_p10(16 - 1 downto 0);
    mul_ln68_fu_593_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_width_read),32));
    or_ln100_fu_492_p2 <= (tmp_1_fu_469_p3 or icmp_ln100_reg_716);
    or_ln101_fu_439_p2 <= (tmp_4_fu_413_p3 or icmp_ln101_fu_407_p2);
    or_ln102_fu_568_p2 <= (tmp_6_fu_542_p3 or icmp_ln102_fu_536_p2);
    out_channels_ch1_address0 <= zext_ln94_1_reg_666_pp0_iter5_reg(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= 
        select_ln100_fu_485_p3 when (or_ln100_fu_492_p2(0) = '1') else 
        trunc_ln_fu_476_p4;

    out_channels_ch1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln85_reg_642_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln85_reg_642_pp0_iter5_reg = ap_const_lv1_0))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= zext_ln94_1_reg_666_pp0_iter5_reg(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= G_reg_722;

    out_channels_ch2_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln85_reg_642_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln85_reg_642_pp0_iter5_reg = ap_const_lv1_0))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= zext_ln94_1_reg_666_pp0_iter5_reg(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= 
        select_ln102_fu_560_p3 when (or_ln102_fu_568_p2(0) = '1') else 
        trunc_ln4_fu_550_p4;

    out_channels_ch3_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln85_reg_642_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln85_reg_642_pp0_iter5_reg = ap_const_lv1_0))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln100_fu_485_p3 <= 
        ap_const_lv8_FF when (icmp_ln100_reg_716(0) = '1') else 
        ap_const_lv8_0;
    select_ln101_fu_431_p3 <= 
        ap_const_lv8_FF when (icmp_ln101_fu_407_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln102_fu_560_p3 <= 
        ap_const_lv8_FF when (icmp_ln102_fu_536_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln94_1_fu_273_p3 <= 
        x_fu_254_p2 when (icmp_ln88_fu_260_p2(0) = '1') else 
        ap_phi_mux_x_0_phi_fu_217_p4;
    select_ln94_fu_265_p3 <= 
        ap_const_lv16_0 when (icmp_ln88_fu_260_p2(0) = '1') else 
        y_0_reg_224;
        sext_ln101_2_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_618_p3),18));

        sext_ln102_1_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln102_1_fu_453_p3),18));

        sext_ln102_2_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln102_1_reg_727),19));

        sext_ln102_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_506_p3),19));

    shl_ln102_1_fu_453_p3 <= (D_reg_693 & ap_const_lv2_0);
    shl_ln_fu_506_p3 <= (D_reg_693_pp0_iter5_reg & ap_const_lv9_0);
    tmp_1_fu_469_p3 <= add_ln100_1_reg_710(17 downto 17);
    tmp_3_fu_397_p4 <= add_ln101_1_fu_392_p2(17 downto 16);
    tmp_4_fu_413_p3 <= add_ln101_1_fu_392_p2(17 downto 17);
    tmp_5_fu_526_p4 <= add_ln102_fu_520_p2(18 downto 16);
    tmp_6_fu_542_p3 <= add_ln102_fu_520_p2(18 downto 18);
    tmp_fu_371_p4 <= grp_fu_609_p3(17 downto 16);
    trunc_ln3_fu_421_p4 <= add_ln101_1_fu_392_p2(15 downto 8);
    trunc_ln4_fu_550_p4 <= add_ln102_fu_520_p2(15 downto 8);
    trunc_ln94_1_fu_293_p1 <= select_ln94_1_fu_273_p3(15 - 1 downto 0);
    trunc_ln94_fu_281_p1 <= select_ln94_1_fu_273_p3(13 - 1 downto 0);
    trunc_ln_fu_476_p4 <= add_ln100_1_reg_710(15 downto 8);
    x_fu_254_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(ap_phi_mux_x_0_phi_fu_217_p4));
    y_fu_321_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(select_ln94_fu_265_p3));
    zext_ln94_1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_1_reg_656),64));
    zext_ln94_2_cast_fu_297_p3 <= (trunc_ln94_1_fu_293_p1 & ap_const_lv8_0);
    zext_ln94_cast_fu_285_p3 <= (trunc_ln94_fu_281_p1 & ap_const_lv10_0);
    zext_ln94_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln94_fu_265_p3),23));
    zext_ln97_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels_ch1_q0),9));
end behav;
