// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _yuv_scale_HH_
#define _yuv_scale_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "yuv_filter_mul_mubkb.h"

namespace ap_rtl {

struct yuv_scale : public sc_module {
    // Port declarations 34
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<22> > in_channels_ch1_address0;
    sc_out< sc_logic > in_channels_ch1_ce0;
    sc_in< sc_lv<8> > in_channels_ch1_q0;
    sc_out< sc_lv<22> > in_channels_ch2_address0;
    sc_out< sc_logic > in_channels_ch2_ce0;
    sc_in< sc_lv<8> > in_channels_ch2_q0;
    sc_out< sc_lv<22> > in_channels_ch3_address0;
    sc_out< sc_logic > in_channels_ch3_ce0;
    sc_in< sc_lv<8> > in_channels_ch3_q0;
    sc_in< sc_lv<16> > in_width_read;
    sc_in< sc_lv<16> > in_height_read;
    sc_out< sc_lv<22> > out_channels_ch1_address0;
    sc_out< sc_logic > out_channels_ch1_ce0;
    sc_out< sc_logic > out_channels_ch1_we0;
    sc_out< sc_lv<8> > out_channels_ch1_d0;
    sc_out< sc_lv<22> > out_channels_ch2_address0;
    sc_out< sc_logic > out_channels_ch2_ce0;
    sc_out< sc_logic > out_channels_ch2_we0;
    sc_out< sc_lv<8> > out_channels_ch2_d0;
    sc_out< sc_lv<22> > out_channels_ch3_address0;
    sc_out< sc_logic > out_channels_ch3_ce0;
    sc_out< sc_logic > out_channels_ch3_we0;
    sc_out< sc_lv<8> > out_channels_ch3_d0;
    sc_in< sc_lv<8> > Y_scale;
    sc_in< sc_lv<8> > U_scale;
    sc_in< sc_lv<8> > V_scale;
    sc_out< sc_lv<16> > ap_return_0;
    sc_out< sc_lv<16> > ap_return_1;


    // Module declarations
    yuv_scale(sc_module_name name);
    SC_HAS_PROCESS(yuv_scale);

    ~yuv_scale();

    sc_trace_file* mVcdFile;

    yuv_filter_mul_mubkb<1,1,16,16,32>* yuv_filter_mul_mubkb_U17;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > indvar_flatten_reg_184;
    sc_signal< sc_lv<16> > x_0_reg_195;
    sc_signal< sc_lv<16> > y_0_reg_206;
    sc_signal< sc_lv<15> > zext_ln138_fu_217_p1;
    sc_signal< sc_lv<15> > zext_ln138_reg_411;
    sc_signal< sc_lv<15> > zext_ln139_fu_221_p1;
    sc_signal< sc_lv<15> > zext_ln139_reg_416;
    sc_signal< sc_lv<15> > zext_ln129_fu_225_p1;
    sc_signal< sc_lv<15> > zext_ln129_reg_421;
    sc_signal< sc_lv<32> > mul_ln111_fu_394_p2;
    sc_signal< sc_lv<32> > mul_ln111_reg_426;
    sc_signal< sc_lv<1> > icmp_ln129_fu_237_p2;
    sc_signal< sc_lv<1> > icmp_ln129_reg_431;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln129_reg_431_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln129_reg_431_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln129_reg_431_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln129_reg_431_pp0_iter4_reg;
    sc_signal< sc_lv<32> > add_ln129_fu_242_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<16> > select_ln134_1_fu_267_p3;
    sc_signal< sc_lv<16> > select_ln134_1_reg_440;
    sc_signal< sc_lv<23> > add_ln134_1_fu_309_p2;
    sc_signal< sc_lv<23> > add_ln134_1_reg_445;
    sc_signal< sc_lv<16> > y_fu_315_p2;
    sc_signal< sc_lv<64> > zext_ln134_1_fu_321_p1;
    sc_signal< sc_lv<64> > zext_ln134_1_reg_455;
    sc_signal< sc_lv<64> > zext_ln134_1_reg_455_pp0_iter2_reg;
    sc_signal< sc_lv<64> > zext_ln134_1_reg_455_pp0_iter3_reg;
    sc_signal< sc_lv<64> > zext_ln134_1_reg_455_pp0_iter4_reg;
    sc_signal< sc_lv<8> > trunc_ln_reg_477;
    sc_signal< sc_lv<8> > trunc_ln1_reg_482;
    sc_signal< sc_lv<8> > trunc_ln2_reg_487;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_lv<16> > ap_phi_mux_x_0_phi_fu_199_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln132_fu_254_p2;
    sc_signal< sc_lv<16> > x_fu_248_p2;
    sc_signal< sc_lv<13> > trunc_ln134_fu_275_p1;
    sc_signal< sc_lv<15> > trunc_ln134_1_fu_287_p1;
    sc_signal< sc_lv<23> > zext_ln134_cast_fu_279_p3;
    sc_signal< sc_lv<23> > zext_ln134_2_cast_fu_291_p3;
    sc_signal< sc_lv<16> > select_ln134_fu_259_p3;
    sc_signal< sc_lv<23> > zext_ln134_fu_305_p1;
    sc_signal< sc_lv<23> > add_ln134_fu_299_p2;
    sc_signal< sc_lv<8> > mul_ln137_fu_331_p0;
    sc_signal< sc_lv<8> > mul_ln137_fu_331_p1;
    sc_signal< sc_lv<8> > mul_ln138_fu_340_p0;
    sc_signal< sc_lv<8> > mul_ln138_fu_340_p1;
    sc_signal< sc_lv<8> > mul_ln139_fu_349_p0;
    sc_signal< sc_lv<8> > mul_ln139_fu_349_p1;
    sc_signal< sc_lv<15> > mul_ln137_fu_331_p2;
    sc_signal< sc_lv<15> > mul_ln138_fu_340_p2;
    sc_signal< sc_lv<15> > mul_ln139_fu_349_p2;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<16> > mul_ln111_fu_394_p0;
    sc_signal< sc_lv<16> > mul_ln111_fu_394_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<32> > mul_ln111_fu_394_p00;
    sc_signal< sc_lv<32> > mul_ln111_fu_394_p10;
    sc_signal< sc_lv<15> > mul_ln137_fu_331_p00;
    sc_signal< sc_lv<15> > mul_ln138_fu_340_p00;
    sc_signal< sc_lv<15> > mul_ln139_fu_349_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state9;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln129_fu_242_p2();
    void thread_add_ln134_1_fu_309_p2();
    void thread_add_ln134_fu_299_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_x_0_phi_fu_199_p4();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_icmp_ln129_fu_237_p2();
    void thread_icmp_ln132_fu_254_p2();
    void thread_in_channels_ch1_address0();
    void thread_in_channels_ch1_ce0();
    void thread_in_channels_ch2_address0();
    void thread_in_channels_ch2_ce0();
    void thread_in_channels_ch3_address0();
    void thread_in_channels_ch3_ce0();
    void thread_mul_ln111_fu_394_p0();
    void thread_mul_ln111_fu_394_p00();
    void thread_mul_ln111_fu_394_p1();
    void thread_mul_ln111_fu_394_p10();
    void thread_mul_ln137_fu_331_p0();
    void thread_mul_ln137_fu_331_p00();
    void thread_mul_ln137_fu_331_p1();
    void thread_mul_ln137_fu_331_p2();
    void thread_mul_ln138_fu_340_p0();
    void thread_mul_ln138_fu_340_p00();
    void thread_mul_ln138_fu_340_p1();
    void thread_mul_ln138_fu_340_p2();
    void thread_mul_ln139_fu_349_p0();
    void thread_mul_ln139_fu_349_p00();
    void thread_mul_ln139_fu_349_p1();
    void thread_mul_ln139_fu_349_p2();
    void thread_out_channels_ch1_address0();
    void thread_out_channels_ch1_ce0();
    void thread_out_channels_ch1_d0();
    void thread_out_channels_ch1_we0();
    void thread_out_channels_ch2_address0();
    void thread_out_channels_ch2_ce0();
    void thread_out_channels_ch2_d0();
    void thread_out_channels_ch2_we0();
    void thread_out_channels_ch3_address0();
    void thread_out_channels_ch3_ce0();
    void thread_out_channels_ch3_d0();
    void thread_out_channels_ch3_we0();
    void thread_select_ln134_1_fu_267_p3();
    void thread_select_ln134_fu_259_p3();
    void thread_trunc_ln134_1_fu_287_p1();
    void thread_trunc_ln134_fu_275_p1();
    void thread_x_fu_248_p2();
    void thread_y_fu_315_p2();
    void thread_zext_ln129_fu_225_p1();
    void thread_zext_ln134_1_fu_321_p1();
    void thread_zext_ln134_2_cast_fu_291_p3();
    void thread_zext_ln134_cast_fu_279_p3();
    void thread_zext_ln134_fu_305_p1();
    void thread_zext_ln138_fu_217_p1();
    void thread_zext_ln139_fu_221_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
