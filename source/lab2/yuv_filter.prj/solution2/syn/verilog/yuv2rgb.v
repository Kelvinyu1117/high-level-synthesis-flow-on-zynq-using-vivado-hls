// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv2rgb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width_read,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state10 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width_read;
input  [15:0] in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] indvar_flatten_reg_202;
reg   [15:0] x_0_reg_213;
reg   [15:0] y_0_reg_224;
wire   [31:0] mul_ln68_fu_593_p2;
reg   [31:0] mul_ln68_reg_637;
wire   [0:0] icmp_ln85_fu_243_p2;
reg   [0:0] icmp_ln85_reg_642;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln85_reg_642_pp0_iter1_reg;
reg   [0:0] icmp_ln85_reg_642_pp0_iter2_reg;
reg   [0:0] icmp_ln85_reg_642_pp0_iter3_reg;
reg   [0:0] icmp_ln85_reg_642_pp0_iter4_reg;
reg   [0:0] icmp_ln85_reg_642_pp0_iter5_reg;
wire   [31:0] add_ln85_fu_248_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] select_ln94_1_fu_273_p3;
reg   [15:0] select_ln94_1_reg_651;
wire   [22:0] add_ln94_1_fu_315_p2;
reg   [22:0] add_ln94_1_reg_656;
wire   [15:0] y_fu_321_p2;
wire   [63:0] zext_ln94_1_fu_327_p1;
reg   [63:0] zext_ln94_1_reg_666;
reg   [63:0] zext_ln94_1_reg_666_pp0_iter2_reg;
reg   [63:0] zext_ln94_1_reg_666_pp0_iter3_reg;
reg   [63:0] zext_ln94_1_reg_666_pp0_iter4_reg;
reg   [63:0] zext_ln94_1_reg_666_pp0_iter5_reg;
wire   [8:0] C_fu_337_p2;
reg  signed [8:0] C_reg_688;
wire  signed [7:0] D_fu_343_p2;
reg  signed [7:0] D_reg_693;
reg  signed [7:0] D_reg_693_pp0_iter5_reg;
wire  signed [7:0] E_fu_349_p2;
reg  signed [7:0] E_reg_700;
wire   [16:0] mul_ln101_1_fu_359_p2;
reg  signed [16:0] mul_ln101_1_reg_705;
wire  signed [17:0] grp_fu_609_p3;
reg  signed [17:0] add_ln100_1_reg_710;
reg    ap_enable_reg_pp0_iter5;
wire   [0:0] icmp_ln100_fu_380_p2;
reg   [0:0] icmp_ln100_reg_716;
wire   [7:0] G_fu_445_p3;
reg   [7:0] G_reg_722;
(* use_dsp48 = "no" *) wire   [17:0] add_ln102_1_fu_464_p2;
reg   [17:0] add_ln102_1_reg_727;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg   [15:0] ap_phi_mux_x_0_phi_fu_217_p4;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln88_fu_260_p2;
wire   [15:0] x_fu_254_p2;
wire   [12:0] trunc_ln94_fu_281_p1;
wire   [14:0] trunc_ln94_1_fu_293_p1;
wire   [22:0] zext_ln94_2_cast_fu_297_p3;
wire   [22:0] zext_ln94_cast_fu_285_p3;
wire   [15:0] select_ln94_fu_265_p3;
wire   [22:0] add_ln94_fu_305_p2;
wire   [22:0] zext_ln94_fu_311_p1;
wire   [8:0] zext_ln97_fu_333_p1;
wire  signed [7:0] mul_ln101_1_fu_359_p1;
wire   [1:0] tmp_fu_371_p4;
wire  signed [16:0] grp_fu_618_p3;
wire  signed [17:0] grp_fu_599_p3;
wire  signed [17:0] sext_ln101_2_fu_389_p1;
(* use_dsp48 = "no" *) wire   [17:0] add_ln101_1_fu_392_p2;
wire   [1:0] tmp_3_fu_397_p4;
wire   [0:0] icmp_ln101_fu_407_p2;
wire   [0:0] tmp_4_fu_413_p3;
wire   [0:0] or_ln101_fu_439_p2;
wire   [7:0] select_ln101_fu_431_p3;
wire   [7:0] trunc_ln3_fu_421_p4;
wire   [9:0] shl_ln102_1_fu_453_p3;
wire  signed [17:0] sext_ln102_1_fu_460_p1;
wire   [0:0] tmp_1_fu_469_p3;
wire   [0:0] or_ln100_fu_492_p2;
wire   [7:0] select_ln100_fu_485_p3;
wire   [7:0] trunc_ln_fu_476_p4;
wire   [16:0] shl_ln_fu_506_p3;
wire  signed [18:0] sext_ln102_fu_513_p1;
wire  signed [18:0] sext_ln102_2_fu_517_p1;
wire   [18:0] add_ln102_fu_520_p2;
wire   [2:0] tmp_5_fu_526_p4;
wire   [0:0] icmp_ln102_fu_536_p2;
wire   [0:0] tmp_6_fu_542_p3;
wire   [0:0] or_ln102_fu_568_p2;
wire   [7:0] select_ln102_fu_560_p3;
wire   [7:0] trunc_ln4_fu_550_p4;
wire    ap_CS_fsm_state10;
wire   [15:0] mul_ln68_fu_593_p0;
wire   [15:0] mul_ln68_fu_593_p1;
wire   [9:0] grp_fu_599_p0;
wire   [8:0] grp_fu_599_p2;
wire   [9:0] grp_fu_609_p0;
wire  signed [7:0] grp_fu_618_p0;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] mul_ln68_fu_593_p00;
wire   [31:0] mul_ln68_fu_593_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

yuv_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yuv_filter_mul_mubkb_U29(
    .din0(mul_ln68_fu_593_p0),
    .din1(mul_ln68_fu_593_p1),
    .dout(mul_ln68_fu_593_p2)
);

yuv_filter_mac_mufYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
yuv_filter_mac_mufYi_U30(
    .din0(grp_fu_599_p0),
    .din1(C_reg_688),
    .din2(grp_fu_599_p2),
    .dout(grp_fu_599_p3)
);

yuv_filter_mac_mug8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
yuv_filter_mac_mug8j_U31(
    .din0(grp_fu_609_p0),
    .din1(E_reg_700),
    .din2(grp_fu_599_p3),
    .dout(grp_fu_609_p3)
);

yuv_filter_mac_muhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
yuv_filter_mac_muhbi_U32(
    .din0(grp_fu_618_p0),
    .din1(D_reg_693),
    .din2(mul_ln101_1_reg_705),
    .dout(grp_fu_618_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln85_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_202 <= add_ln85_fu_248_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_202 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln85_reg_642 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        x_0_reg_213 <= select_ln94_1_reg_651;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_reg_213 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln85_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        y_0_reg_224 <= y_fu_321_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_0_reg_224 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln85_reg_642_pp0_iter3_reg == 1'd0))) begin
        C_reg_688 <= C_fu_337_p2;
        D_reg_693 <= D_fu_343_p2;
        E_reg_700 <= E_fu_349_p2;
        mul_ln101_1_reg_705 <= mul_ln101_1_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        D_reg_693_pp0_iter5_reg <= D_reg_693;
        icmp_ln85_reg_642_pp0_iter2_reg <= icmp_ln85_reg_642_pp0_iter1_reg;
        icmp_ln85_reg_642_pp0_iter3_reg <= icmp_ln85_reg_642_pp0_iter2_reg;
        icmp_ln85_reg_642_pp0_iter4_reg <= icmp_ln85_reg_642_pp0_iter3_reg;
        icmp_ln85_reg_642_pp0_iter5_reg <= icmp_ln85_reg_642_pp0_iter4_reg;
        zext_ln94_1_reg_666_pp0_iter2_reg[22 : 0] <= zext_ln94_1_reg_666[22 : 0];
        zext_ln94_1_reg_666_pp0_iter3_reg[22 : 0] <= zext_ln94_1_reg_666_pp0_iter2_reg[22 : 0];
        zext_ln94_1_reg_666_pp0_iter4_reg[22 : 0] <= zext_ln94_1_reg_666_pp0_iter3_reg[22 : 0];
        zext_ln94_1_reg_666_pp0_iter5_reg[22 : 0] <= zext_ln94_1_reg_666_pp0_iter4_reg[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln85_reg_642_pp0_iter4_reg == 1'd0))) begin
        G_reg_722 <= G_fu_445_p3;
        add_ln102_1_reg_727 <= add_ln102_1_fu_464_p2;
        icmp_ln100_reg_716 <= icmp_ln100_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln85_reg_642_pp0_iter4_reg == 1'd0))) begin
        add_ln100_1_reg_710 <= grp_fu_609_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln85_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln94_1_reg_656 <= add_ln94_1_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln85_reg_642 <= icmp_ln85_fu_243_p2;
        icmp_ln85_reg_642_pp0_iter1_reg <= icmp_ln85_reg_642;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln68_reg_637 <= mul_ln68_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln85_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln94_1_reg_651 <= select_ln94_1_fu_273_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln85_reg_642 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln94_1_reg_666[22 : 0] <= zext_ln94_1_fu_327_p1[22 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln85_fu_243_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_642 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_x_0_phi_fu_217_p4 = select_ln94_1_reg_651;
    end else begin
        ap_phi_mux_x_0_phi_fu_217_p4 = x_0_reg_213;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln85_reg_642_pp0_iter5_reg == 1'd0))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln85_reg_642_pp0_iter5_reg == 1'd0))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln85_reg_642_pp0_iter5_reg == 1'd0))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln85_fu_243_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln85_fu_243_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_fu_337_p2 = ($signed(9'd496) + $signed(zext_ln97_fu_333_p1));

assign D_fu_343_p2 = (in_channels_ch2_q0 ^ 8'd128);

assign E_fu_349_p2 = (in_channels_ch3_q0 ^ 8'd128);

assign G_fu_445_p3 = ((or_ln101_fu_439_p2[0:0] === 1'b1) ? select_ln101_fu_431_p3 : trunc_ln3_fu_421_p4);

assign add_ln101_1_fu_392_p2 = ($signed(grp_fu_599_p3) + $signed(sext_ln101_2_fu_389_p1));

assign add_ln102_1_fu_464_p2 = ($signed(grp_fu_599_p3) + $signed(sext_ln102_1_fu_460_p1));

assign add_ln102_fu_520_p2 = ($signed(sext_ln102_fu_513_p1) + $signed(sext_ln102_2_fu_517_p1));

assign add_ln85_fu_248_p2 = (indvar_flatten_reg_202 + 32'd1);

assign add_ln94_1_fu_315_p2 = (add_ln94_fu_305_p2 + zext_ln94_fu_311_p1);

assign add_ln94_fu_305_p2 = (zext_ln94_2_cast_fu_297_p3 + zext_ln94_cast_fu_285_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = in_width_read;

assign ap_return_1 = in_height_read;

assign grp_fu_599_p0 = 18'd298;

assign grp_fu_599_p2 = 18'd128;

assign grp_fu_609_p0 = 18'd409;

assign grp_fu_618_p0 = 16'd65436;

assign icmp_ln100_fu_380_p2 = ((tmp_fu_371_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln101_fu_407_p2 = ((tmp_3_fu_397_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_536_p2 = (($signed(tmp_5_fu_526_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_243_p2 = ((indvar_flatten_reg_202 == mul_ln68_reg_637) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_260_p2 = ((y_0_reg_224 == in_height_read) ? 1'b1 : 1'b0);

assign in_channels_ch1_address0 = zext_ln94_1_fu_327_p1;

assign in_channels_ch2_address0 = zext_ln94_1_fu_327_p1;

assign in_channels_ch3_address0 = zext_ln94_1_fu_327_p1;

assign mul_ln101_1_fu_359_p1 = E_fu_349_p2;

assign mul_ln101_1_fu_359_p2 = ($signed(17'd130864) * $signed(mul_ln101_1_fu_359_p1));

assign mul_ln68_fu_593_p0 = mul_ln68_fu_593_p00;

assign mul_ln68_fu_593_p00 = in_height_read;

assign mul_ln68_fu_593_p1 = mul_ln68_fu_593_p10;

assign mul_ln68_fu_593_p10 = in_width_read;

assign or_ln100_fu_492_p2 = (tmp_1_fu_469_p3 | icmp_ln100_reg_716);

assign or_ln101_fu_439_p2 = (tmp_4_fu_413_p3 | icmp_ln101_fu_407_p2);

assign or_ln102_fu_568_p2 = (tmp_6_fu_542_p3 | icmp_ln102_fu_536_p2);

assign out_channels_ch1_address0 = zext_ln94_1_reg_666_pp0_iter5_reg;

assign out_channels_ch1_d0 = ((or_ln100_fu_492_p2[0:0] === 1'b1) ? select_ln100_fu_485_p3 : trunc_ln_fu_476_p4);

assign out_channels_ch2_address0 = zext_ln94_1_reg_666_pp0_iter5_reg;

assign out_channels_ch2_d0 = G_reg_722;

assign out_channels_ch3_address0 = zext_ln94_1_reg_666_pp0_iter5_reg;

assign out_channels_ch3_d0 = ((or_ln102_fu_568_p2[0:0] === 1'b1) ? select_ln102_fu_560_p3 : trunc_ln4_fu_550_p4);

assign select_ln100_fu_485_p3 = ((icmp_ln100_reg_716[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln101_fu_431_p3 = ((icmp_ln101_fu_407_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln102_fu_560_p3 = ((icmp_ln102_fu_536_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln94_1_fu_273_p3 = ((icmp_ln88_fu_260_p2[0:0] === 1'b1) ? x_fu_254_p2 : ap_phi_mux_x_0_phi_fu_217_p4);

assign select_ln94_fu_265_p3 = ((icmp_ln88_fu_260_p2[0:0] === 1'b1) ? 16'd0 : y_0_reg_224);

assign sext_ln101_2_fu_389_p1 = grp_fu_618_p3;

assign sext_ln102_1_fu_460_p1 = $signed(shl_ln102_1_fu_453_p3);

assign sext_ln102_2_fu_517_p1 = $signed(add_ln102_1_reg_727);

assign sext_ln102_fu_513_p1 = $signed(shl_ln_fu_506_p3);

assign shl_ln102_1_fu_453_p3 = {{D_reg_693}, {2'd0}};

assign shl_ln_fu_506_p3 = {{D_reg_693_pp0_iter5_reg}, {9'd0}};

assign tmp_1_fu_469_p3 = add_ln100_1_reg_710[32'd17];

assign tmp_3_fu_397_p4 = {{add_ln101_1_fu_392_p2[17:16]}};

assign tmp_4_fu_413_p3 = add_ln101_1_fu_392_p2[32'd17];

assign tmp_5_fu_526_p4 = {{add_ln102_fu_520_p2[18:16]}};

assign tmp_6_fu_542_p3 = add_ln102_fu_520_p2[32'd18];

assign tmp_fu_371_p4 = {{grp_fu_609_p3[17:16]}};

assign trunc_ln3_fu_421_p4 = {{add_ln101_1_fu_392_p2[15:8]}};

assign trunc_ln4_fu_550_p4 = {{add_ln102_fu_520_p2[15:8]}};

assign trunc_ln94_1_fu_293_p1 = select_ln94_1_fu_273_p3[14:0];

assign trunc_ln94_fu_281_p1 = select_ln94_1_fu_273_p3[12:0];

assign trunc_ln_fu_476_p4 = {{add_ln100_1_reg_710[15:8]}};

assign x_fu_254_p2 = (16'd1 + ap_phi_mux_x_0_phi_fu_217_p4);

assign y_fu_321_p2 = (16'd1 + select_ln94_fu_265_p3);

assign zext_ln94_1_fu_327_p1 = add_ln94_1_reg_656;

assign zext_ln94_2_cast_fu_297_p3 = {{trunc_ln94_1_fu_293_p1}, {8'd0}};

assign zext_ln94_cast_fu_285_p3 = {{trunc_ln94_fu_281_p1}, {10'd0}};

assign zext_ln94_fu_311_p1 = select_ln94_fu_265_p3;

assign zext_ln97_fu_333_p1 = in_channels_ch1_q0;

always @ (posedge ap_clk) begin
    zext_ln94_1_reg_666[63:23] <= 41'b00000000000000000000000000000000000000000;
    zext_ln94_1_reg_666_pp0_iter2_reg[63:23] <= 41'b00000000000000000000000000000000000000000;
    zext_ln94_1_reg_666_pp0_iter3_reg[63:23] <= 41'b00000000000000000000000000000000000000000;
    zext_ln94_1_reg_666_pp0_iter4_reg[63:23] <= 41'b00000000000000000000000000000000000000000;
    zext_ln94_1_reg_666_pp0_iter5_reg[63:23] <= 41'b00000000000000000000000000000000000000000;
end

endmodule //yuv2rgb
