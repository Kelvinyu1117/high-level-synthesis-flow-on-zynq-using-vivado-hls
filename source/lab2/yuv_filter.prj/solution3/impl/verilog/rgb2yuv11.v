// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rgb2yuv11 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width,
        in_height,
        out_channels_ch1_din,
        out_channels_ch1_full_n,
        out_channels_ch1_write,
        out_channels_ch2_din,
        out_channels_ch2_full_n,
        out_channels_ch2_write,
        out_channels_ch3_din,
        out_channels_ch3_full_n,
        out_channels_ch3_write,
        out_width_din,
        out_width_full_n,
        out_width_write,
        out_height_din,
        out_height_full_n,
        out_height_write,
        Y_scale,
        U_scale,
        V_scale,
        Y_scale_out_din,
        Y_scale_out_full_n,
        Y_scale_out_write,
        U_scale_out_din,
        U_scale_out_full_n,
        U_scale_out_write,
        V_scale_out_din,
        V_scale_out_full_n,
        V_scale_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width;
input  [15:0] in_height;
output  [7:0] out_channels_ch1_din;
input   out_channels_ch1_full_n;
output   out_channels_ch1_write;
output  [7:0] out_channels_ch2_din;
input   out_channels_ch2_full_n;
output   out_channels_ch2_write;
output  [7:0] out_channels_ch3_din;
input   out_channels_ch3_full_n;
output   out_channels_ch3_write;
output  [15:0] out_width_din;
input   out_width_full_n;
output   out_width_write;
output  [15:0] out_height_din;
input   out_height_full_n;
output   out_height_write;
input  [7:0] Y_scale;
input  [7:0] U_scale;
input  [7:0] V_scale;
output  [7:0] Y_scale_out_din;
input   Y_scale_out_full_n;
output   Y_scale_out_write;
output  [7:0] U_scale_out_din;
input   U_scale_out_full_n;
output   U_scale_out_write;
output  [7:0] V_scale_out_din;
input   V_scale_out_full_n;
output   V_scale_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_write;
reg out_channels_ch2_write;
reg out_channels_ch3_write;
reg out_width_write;
reg out_height_write;
reg Y_scale_out_write;
reg U_scale_out_write;
reg V_scale_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    out_channels_ch1_blk_n;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln45_reg_665;
reg   [0:0] icmp_ln45_reg_665_pp0_iter5_reg;
reg    out_channels_ch2_blk_n;
reg    out_channels_ch3_blk_n;
reg    out_width_blk_n;
reg    out_height_blk_n;
reg    Y_scale_out_blk_n;
reg    U_scale_out_blk_n;
reg    V_scale_out_blk_n;
reg   [31:0] indvar_flatten_reg_266;
reg   [15:0] x_0_i_i_reg_277;
reg   [15:0] y_0_i_i_reg_288;
reg    ap_block_state1;
wire   [31:0] bound_fu_606_p2;
reg   [31:0] bound_reg_660;
wire   [0:0] icmp_ln45_fu_307_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
reg    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln45_reg_665_pp0_iter1_reg;
reg   [0:0] icmp_ln45_reg_665_pp0_iter2_reg;
reg   [0:0] icmp_ln45_reg_665_pp0_iter3_reg;
reg   [0:0] icmp_ln45_reg_665_pp0_iter4_reg;
wire   [31:0] add_ln45_fu_312_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] select_ln54_1_fu_337_p3;
reg   [15:0] select_ln54_1_reg_674;
wire   [22:0] add_ln54_1_fu_379_p2;
reg   [22:0] add_ln54_1_reg_679;
wire   [15:0] y_fu_385_p2;
reg   [7:0] R_reg_704;
reg   [7:0] G_reg_711;
reg   [7:0] G_reg_711_pp0_iter5_reg;
reg   [7:0] B_reg_718;
reg   [7:0] trunc_ln_reg_726;
(* use_dsp48 = "no" *) wire   [15:0] add_ln58_1_fu_519_p2;
reg   [15:0] add_ln58_1_reg_731;
(* use_dsp48 = "no" *) wire   [15:0] add_ln59_1_fu_559_p2;
reg   [15:0] add_ln59_1_reg_736;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [15:0] ap_phi_mux_x_0_i_i_phi_fu_281_p4;
wire   [63:0] zext_ln54_1_fu_391_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln48_fu_324_p2;
wire   [15:0] x_fu_318_p2;
wire   [12:0] trunc_ln54_fu_345_p1;
wire   [14:0] trunc_ln54_1_fu_357_p1;
wire   [22:0] zext_ln54_cast_fu_349_p3;
wire   [22:0] zext_ln54_2_cast_fu_361_p3;
wire   [15:0] select_ln54_fu_329_p3;
wire   [22:0] zext_ln54_fu_375_p1;
wire   [22:0] add_ln54_fu_369_p2;
wire   [13:0] shl_ln_fu_400_p3;
wire   [8:0] shl_ln57_1_fu_411_p3;
wire   [14:0] shl_ln57_2_fu_425_p3;
wire   [9:0] zext_ln57_1_fu_418_p1;
wire   [9:0] add_ln57_fu_439_p2;
wire   [14:0] zext_ln57_6_fu_445_p1;
wire   [14:0] zext_ln57_fu_407_p1;
wire   [14:0] add_ln57_1_fu_449_p2;
wire   [15:0] zext_ln57_4_fu_432_p1;
wire   [15:0] zext_ln57_7_fu_455_p1;
wire   [12:0] grp_fu_612_p3;
wire   [15:0] zext_ln57_8_fu_465_p1;
wire   [15:0] add_ln57_2_fu_459_p2;
wire   [15:0] add_ln57_4_fu_468_p2;
wire   [14:0] shl_ln1_fu_484_p3;
wire   [11:0] shl_ln58_1_fu_495_p3;
wire   [15:0] zext_ln58_fu_491_p1;
wire   [15:0] zext_ln58_2_fu_506_p1;
wire  signed [14:0] grp_fu_621_p3;
wire   [15:0] sub_ln58_fu_510_p2;
wire  signed [15:0] sext_ln58_fu_516_p1;
wire   [12:0] zext_ln58_1_fu_502_p1;
wire   [12:0] sub_ln59_fu_525_p2;
wire   [8:0] shl_ln2_fu_535_p3;
wire  signed [13:0] sext_ln59_fu_531_p1;
wire   [13:0] zext_ln59_1_fu_542_p1;
wire   [13:0] sub_ln59_1_fu_546_p2;
wire   [14:0] grp_fu_630_p3;
wire   [15:0] zext_ln59_2_fu_556_p1;
wire  signed [15:0] sext_ln59_1_fu_552_p1;
wire  signed [15:0] grp_fu_639_p3;
wire   [7:0] trunc_ln5_fu_574_p4;
wire  signed [15:0] grp_fu_647_p3;
wire   [7:0] trunc_ln6_fu_590_p4;
wire   [15:0] bound_fu_606_p0;
wire   [15:0] bound_fu_606_p1;
wire   [5:0] grp_fu_612_p0;
wire   [7:0] grp_fu_612_p1;
wire   [7:0] grp_fu_612_p2;
wire  signed [6:0] grp_fu_621_p0;
wire   [7:0] grp_fu_621_p1;
wire   [14:0] zext_ln59_fu_397_p1;
wire   [8:0] grp_fu_621_p2;
wire   [7:0] grp_fu_630_p0;
wire   [7:0] grp_fu_630_p1;
wire   [8:0] grp_fu_630_p2;
wire  signed [7:0] grp_fu_639_p0;
wire   [7:0] grp_fu_639_p1;
wire   [15:0] zext_ln57_2_fu_565_p1;
wire  signed [7:0] grp_fu_647_p0;
wire   [7:0] grp_fu_647_p1;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] bound_fu_606_p00;
wire   [31:0] bound_fu_606_p10;
wire   [12:0] grp_fu_612_p10;
wire   [12:0] grp_fu_612_p20;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

yuv_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yuv_filter_mul_mubkb_U1(
    .din0(bound_fu_606_p0),
    .din1(bound_fu_606_p1),
    .dout(bound_fu_606_p2)
);

yuv_filter_mac_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
yuv_filter_mac_mucud_U2(
    .din0(grp_fu_612_p0),
    .din1(grp_fu_612_p1),
    .din2(grp_fu_612_p2),
    .dout(grp_fu_612_p3)
);

yuv_filter_mac_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 15 ))
yuv_filter_mac_mudEe_U3(
    .din0(grp_fu_621_p0),
    .din1(grp_fu_621_p1),
    .din2(grp_fu_621_p2),
    .dout(grp_fu_621_p3)
);

yuv_filter_mac_mueOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 15 ))
yuv_filter_mac_mueOg_U4(
    .din0(grp_fu_630_p0),
    .din1(grp_fu_630_p1),
    .din2(grp_fu_630_p2),
    .dout(grp_fu_630_p3)
);

yuv_filter_mac_mufYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
yuv_filter_mac_mufYi_U5(
    .din0(grp_fu_639_p0),
    .din1(grp_fu_639_p1),
    .din2(add_ln58_1_reg_731),
    .dout(grp_fu_639_p3)
);

yuv_filter_mac_mufYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
yuv_filter_mac_mufYi_U6(
    .din0(grp_fu_647_p0),
    .din1(grp_fu_647_p1),
    .din2(add_ln59_1_reg_736),
    .dout(grp_fu_647_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((1'b0 == V_scale_out_full_n) | (real_start == 1'b0) | (1'b0 == U_scale_out_full_n) | (1'b0 == Y_scale_out_full_n) | (out_height_full_n == 1'b0) | (out_width_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((~((1'b0 == V_scale_out_full_n) | (real_start == 1'b0) | (1'b0 == U_scale_out_full_n) | (1'b0 == Y_scale_out_full_n) | (out_height_full_n == 1'b0) | (out_width_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_fu_307_p2 == 1'd0))) begin
        indvar_flatten_reg_266 <= add_ln45_fu_312_p2;
    end else if ((~((1'b0 == V_scale_out_full_n) | (real_start == 1'b0) | (1'b0 == U_scale_out_full_n) | (1'b0 == Y_scale_out_full_n) | (out_height_full_n == 1'b0) | (out_width_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_266 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_665 == 1'd0))) begin
        x_0_i_i_reg_277 <= select_ln54_1_reg_674;
    end else if ((~((1'b0 == V_scale_out_full_n) | (real_start == 1'b0) | (1'b0 == U_scale_out_full_n) | (1'b0 == Y_scale_out_full_n) | (out_height_full_n == 1'b0) | (out_width_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_i_i_reg_277 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_fu_307_p2 == 1'd0))) begin
        y_0_i_i_reg_288 <= y_fu_385_p2;
    end else if ((~((1'b0 == V_scale_out_full_n) | (real_start == 1'b0) | (1'b0 == U_scale_out_full_n) | (1'b0 == Y_scale_out_full_n) | (out_height_full_n == 1'b0) | (out_width_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_0_i_i_reg_288 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_665_pp0_iter3_reg == 1'd0))) begin
        B_reg_718 <= in_channels_ch3_q0;
        G_reg_711 <= in_channels_ch2_q0;
        R_reg_704 <= in_channels_ch1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        G_reg_711_pp0_iter5_reg <= G_reg_711;
        icmp_ln45_reg_665_pp0_iter2_reg <= icmp_ln45_reg_665_pp0_iter1_reg;
        icmp_ln45_reg_665_pp0_iter3_reg <= icmp_ln45_reg_665_pp0_iter2_reg;
        icmp_ln45_reg_665_pp0_iter4_reg <= icmp_ln45_reg_665_pp0_iter3_reg;
        icmp_ln45_reg_665_pp0_iter5_reg <= icmp_ln45_reg_665_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_fu_307_p2 == 1'd0))) begin
        add_ln54_1_reg_679 <= add_ln54_1_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_665_pp0_iter4_reg == 1'd0))) begin
        add_ln58_1_reg_731 <= add_ln58_1_fu_519_p2;
        add_ln59_1_reg_736 <= add_ln59_1_fu_559_p2;
        trunc_ln_reg_726 <= {{add_ln57_4_fu_468_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == V_scale_out_full_n) | (real_start == 1'b0) | (1'b0 == U_scale_out_full_n) | (1'b0 == Y_scale_out_full_n) | (out_height_full_n == 1'b0) | (out_width_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_660 <= bound_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln45_reg_665 <= icmp_ln45_fu_307_p2;
        icmp_ln45_reg_665_pp0_iter1_reg <= icmp_ln45_reg_665;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_fu_307_p2 == 1'd0))) begin
        select_ln54_1_reg_674 <= select_ln54_1_fu_337_p3;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        U_scale_out_blk_n = U_scale_out_full_n;
    end else begin
        U_scale_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == V_scale_out_full_n) | (real_start == 1'b0) | (1'b0 == U_scale_out_full_n) | (1'b0 == Y_scale_out_full_n) | (out_height_full_n == 1'b0) | (out_width_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        U_scale_out_write = 1'b1;
    end else begin
        U_scale_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        V_scale_out_blk_n = V_scale_out_full_n;
    end else begin
        V_scale_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == V_scale_out_full_n) | (real_start == 1'b0) | (1'b0 == U_scale_out_full_n) | (1'b0 == Y_scale_out_full_n) | (out_height_full_n == 1'b0) | (out_width_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        V_scale_out_write = 1'b1;
    end else begin
        V_scale_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_scale_out_blk_n = Y_scale_out_full_n;
    end else begin
        Y_scale_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == V_scale_out_full_n) | (real_start == 1'b0) | (1'b0 == U_scale_out_full_n) | (1'b0 == Y_scale_out_full_n) | (out_height_full_n == 1'b0) | (out_width_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_scale_out_write = 1'b1;
    end else begin
        Y_scale_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_fu_307_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_reg_665 == 1'd0))) begin
        ap_phi_mux_x_0_i_i_phi_fu_281_p4 = select_ln54_1_reg_674;
    end else begin
        ap_phi_mux_x_0_i_i_phi_fu_281_p4 = x_0_i_i_reg_277;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0))) begin
        out_channels_ch1_blk_n = out_channels_ch1_full_n;
    end else begin
        out_channels_ch1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0))) begin
        out_channels_ch1_write = 1'b1;
    end else begin
        out_channels_ch1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0))) begin
        out_channels_ch2_blk_n = out_channels_ch2_full_n;
    end else begin
        out_channels_ch2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0))) begin
        out_channels_ch2_write = 1'b1;
    end else begin
        out_channels_ch2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0))) begin
        out_channels_ch3_blk_n = out_channels_ch3_full_n;
    end else begin
        out_channels_ch3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0))) begin
        out_channels_ch3_write = 1'b1;
    end else begin
        out_channels_ch3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_height_blk_n = out_height_full_n;
    end else begin
        out_height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == V_scale_out_full_n) | (real_start == 1'b0) | (1'b0 == U_scale_out_full_n) | (1'b0 == Y_scale_out_full_n) | (out_height_full_n == 1'b0) | (out_width_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_height_write = 1'b1;
    end else begin
        out_height_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_width_blk_n = out_width_full_n;
    end else begin
        out_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == V_scale_out_full_n) | (real_start == 1'b0) | (1'b0 == U_scale_out_full_n) | (1'b0 == Y_scale_out_full_n) | (out_height_full_n == 1'b0) | (out_width_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_width_write = 1'b1;
    end else begin
        out_width_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == V_scale_out_full_n) | (real_start == 1'b0) | (1'b0 == U_scale_out_full_n) | (1'b0 == Y_scale_out_full_n) | (out_height_full_n == 1'b0) | (out_width_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln45_fu_307_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln45_fu_307_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign U_scale_out_din = U_scale;

assign V_scale_out_din = V_scale;

assign Y_scale_out_din = Y_scale;

assign add_ln45_fu_312_p2 = (indvar_flatten_reg_266 + 32'd1);

assign add_ln54_1_fu_379_p2 = (zext_ln54_fu_375_p1 + add_ln54_fu_369_p2);

assign add_ln54_fu_369_p2 = (zext_ln54_cast_fu_349_p3 + zext_ln54_2_cast_fu_361_p3);

assign add_ln57_1_fu_449_p2 = (zext_ln57_6_fu_445_p1 + zext_ln57_fu_407_p1);

assign add_ln57_2_fu_459_p2 = (zext_ln57_4_fu_432_p1 + zext_ln57_7_fu_455_p1);

assign add_ln57_4_fu_468_p2 = (zext_ln57_8_fu_465_p1 + add_ln57_2_fu_459_p2);

assign add_ln57_fu_439_p2 = (10'd128 + zext_ln57_1_fu_418_p1);

assign add_ln58_1_fu_519_p2 = ($signed(sub_ln58_fu_510_p2) + $signed(sext_ln58_fu_516_p1));

assign add_ln59_1_fu_559_p2 = ($signed(zext_ln59_2_fu_556_p1) + $signed(sext_ln59_1_fu_552_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter6 == 1'b1) & (((out_channels_ch3_full_n == 1'b0) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0)) | ((out_channels_ch2_full_n == 1'b0) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0)) | ((out_channels_ch1_full_n == 1'b0) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter6 == 1'b1) & (((out_channels_ch3_full_n == 1'b0) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0)) | ((out_channels_ch2_full_n == 1'b0) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0)) | ((out_channels_ch1_full_n == 1'b0) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter6 == 1'b1) & (((out_channels_ch3_full_n == 1'b0) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0)) | ((out_channels_ch2_full_n == 1'b0) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0)) | ((out_channels_ch1_full_n == 1'b0) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == V_scale_out_full_n) | (real_start == 1'b0) | (1'b0 == U_scale_out_full_n) | (1'b0 == Y_scale_out_full_n) | (out_height_full_n == 1'b0) | (out_width_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter6 = (((out_channels_ch3_full_n == 1'b0) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0)) | ((out_channels_ch2_full_n == 1'b0) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0)) | ((out_channels_ch1_full_n == 1'b0) & (icmp_ln45_reg_665_pp0_iter5_reg == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_606_p0 = bound_fu_606_p00;

assign bound_fu_606_p00 = in_height;

assign bound_fu_606_p1 = bound_fu_606_p10;

assign bound_fu_606_p10 = in_width;

assign grp_fu_612_p0 = 13'd25;

assign grp_fu_612_p1 = grp_fu_612_p10;

assign grp_fu_612_p10 = B_reg_718;

assign grp_fu_612_p2 = grp_fu_612_p20;

assign grp_fu_612_p20 = G_reg_711;

assign grp_fu_621_p0 = 15'd32730;

assign grp_fu_621_p1 = zext_ln59_fu_397_p1;

assign grp_fu_621_p2 = 15'd128;

assign grp_fu_630_p0 = 15'd122;

assign grp_fu_630_p1 = zext_ln59_fu_397_p1;

assign grp_fu_630_p2 = 15'd128;

assign grp_fu_639_p0 = 16'd65462;

assign grp_fu_639_p1 = zext_ln57_2_fu_565_p1;

assign grp_fu_647_p0 = 16'd65442;

assign grp_fu_647_p1 = zext_ln57_2_fu_565_p1;

assign icmp_ln45_fu_307_p2 = ((indvar_flatten_reg_266 == bound_reg_660) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_324_p2 = ((y_0_i_i_reg_288 == in_height) ? 1'b1 : 1'b0);

assign in_channels_ch1_address0 = zext_ln54_1_fu_391_p1;

assign in_channels_ch2_address0 = zext_ln54_1_fu_391_p1;

assign in_channels_ch3_address0 = zext_ln54_1_fu_391_p1;

assign out_channels_ch1_din = (8'd16 + trunc_ln_reg_726);

assign out_channels_ch2_din = (trunc_ln5_fu_574_p4 ^ 8'd128);

assign out_channels_ch3_din = (trunc_ln6_fu_590_p4 ^ 8'd128);

assign out_height_din = in_height;

assign out_width_din = in_width;

assign select_ln54_1_fu_337_p3 = ((icmp_ln48_fu_324_p2[0:0] === 1'b1) ? x_fu_318_p2 : ap_phi_mux_x_0_i_i_phi_fu_281_p4);

assign select_ln54_fu_329_p3 = ((icmp_ln48_fu_324_p2[0:0] === 1'b1) ? 16'd0 : y_0_i_i_reg_288);

assign sext_ln58_fu_516_p1 = grp_fu_621_p3;

assign sext_ln59_1_fu_552_p1 = $signed(sub_ln59_1_fu_546_p2);

assign sext_ln59_fu_531_p1 = $signed(sub_ln59_fu_525_p2);

assign shl_ln1_fu_484_p3 = {{B_reg_718}, {7'd0}};

assign shl_ln2_fu_535_p3 = {{B_reg_718}, {1'd0}};

assign shl_ln57_1_fu_411_p3 = {{R_reg_704}, {1'd0}};

assign shl_ln57_2_fu_425_p3 = {{G_reg_711}, {7'd0}};

assign shl_ln58_1_fu_495_p3 = {{B_reg_718}, {4'd0}};

assign shl_ln_fu_400_p3 = {{R_reg_704}, {6'd0}};

assign start_out = real_start;

assign sub_ln58_fu_510_p2 = (zext_ln58_fu_491_p1 - zext_ln58_2_fu_506_p1);

assign sub_ln59_1_fu_546_p2 = ($signed(sext_ln59_fu_531_p1) - $signed(zext_ln59_1_fu_542_p1));

assign sub_ln59_fu_525_p2 = (13'd0 - zext_ln58_1_fu_502_p1);

assign trunc_ln54_1_fu_357_p1 = select_ln54_1_fu_337_p3[14:0];

assign trunc_ln54_fu_345_p1 = select_ln54_1_fu_337_p3[12:0];

assign trunc_ln5_fu_574_p4 = {{grp_fu_639_p3[15:8]}};

assign trunc_ln6_fu_590_p4 = {{grp_fu_647_p3[15:8]}};

assign x_fu_318_p2 = (16'd1 + ap_phi_mux_x_0_i_i_phi_fu_281_p4);

assign y_fu_385_p2 = (16'd1 + select_ln54_fu_329_p3);

assign zext_ln54_1_fu_391_p1 = add_ln54_1_reg_679;

assign zext_ln54_2_cast_fu_361_p3 = {{trunc_ln54_1_fu_357_p1}, {8'd0}};

assign zext_ln54_cast_fu_349_p3 = {{trunc_ln54_fu_345_p1}, {10'd0}};

assign zext_ln54_fu_375_p1 = select_ln54_fu_329_p3;

assign zext_ln57_1_fu_418_p1 = shl_ln57_1_fu_411_p3;

assign zext_ln57_2_fu_565_p1 = G_reg_711_pp0_iter5_reg;

assign zext_ln57_4_fu_432_p1 = shl_ln57_2_fu_425_p3;

assign zext_ln57_6_fu_445_p1 = add_ln57_fu_439_p2;

assign zext_ln57_7_fu_455_p1 = add_ln57_1_fu_449_p2;

assign zext_ln57_8_fu_465_p1 = grp_fu_612_p3;

assign zext_ln57_fu_407_p1 = shl_ln_fu_400_p3;

assign zext_ln58_1_fu_502_p1 = shl_ln58_1_fu_495_p3;

assign zext_ln58_2_fu_506_p1 = shl_ln58_1_fu_495_p3;

assign zext_ln58_fu_491_p1 = shl_ln1_fu_484_p3;

assign zext_ln59_1_fu_542_p1 = shl_ln2_fu_535_p3;

assign zext_ln59_2_fu_556_p1 = grp_fu_630_p3;

assign zext_ln59_fu_397_p1 = R_reg_704;

endmodule //rgb2yuv11
