// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv2rgb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_channels_ch1_dout,
        in_channels_ch1_empty_n,
        in_channels_ch1_read,
        in_channels_ch2_dout,
        in_channels_ch2_empty_n,
        in_channels_ch2_read,
        in_channels_ch3_dout,
        in_channels_ch3_empty_n,
        in_channels_ch3_read,
        in_width_dout,
        in_width_empty_n,
        in_width_read,
        in_height_dout,
        in_height_empty_n,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        out_width,
        out_width_ap_vld,
        out_height,
        out_height_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] in_channels_ch1_dout;
input   in_channels_ch1_empty_n;
output   in_channels_ch1_read;
input  [7:0] in_channels_ch2_dout;
input   in_channels_ch2_empty_n;
output   in_channels_ch2_read;
input  [7:0] in_channels_ch3_dout;
input   in_channels_ch3_empty_n;
output   in_channels_ch3_read;
input  [15:0] in_width_dout;
input   in_width_empty_n;
output   in_width_read;
input  [15:0] in_height_dout;
input   in_height_empty_n;
output   in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] out_width;
output   out_width_ap_vld;
output  [15:0] out_height;
output   out_height_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_read;
reg in_channels_ch2_read;
reg in_channels_ch3_read;
reg in_width_read;
reg in_height_read;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;
reg out_width_ap_vld;
reg out_height_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_channels_ch1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln85_reg_649;
reg    in_channels_ch2_blk_n;
reg    in_channels_ch3_blk_n;
reg    in_width_blk_n;
reg    in_height_blk_n;
reg   [31:0] indvar_flatten_reg_205;
reg   [15:0] x_0_reg_216;
reg   [15:0] y_0_reg_228;
reg   [15:0] width_reg_631;
reg    ap_block_state1;
reg   [15:0] height_reg_637;
wire   [31:0] bound_fu_598_p2;
reg   [31:0] bound_reg_644;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln85_fu_246_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln85_reg_649_pp0_iter1_reg;
reg   [0:0] icmp_ln85_reg_649_pp0_iter2_reg;
wire   [31:0] add_ln85_fu_251_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] U_reg_658;
reg   [7:0] V_reg_663;
wire   [8:0] C_fu_261_p2;
reg  signed [8:0] C_reg_668;
wire   [15:0] select_ln94_1_fu_286_p3;
reg   [15:0] select_ln94_1_reg_673;
reg    ap_enable_reg_pp0_iter2;
wire   [22:0] add_ln103_1_fu_328_p2;
reg   [22:0] add_ln103_1_reg_678;
wire  signed [17:0] grp_fu_604_p3;
reg  signed [17:0] add_ln100_reg_683;
wire  signed [17:0] grp_fu_614_p3;
reg  signed [17:0] add_ln100_1_reg_688;
wire   [0:0] icmp_ln100_fu_367_p2;
reg   [0:0] icmp_ln100_reg_694;
wire  signed [16:0] grp_fu_623_p3;
reg  signed [16:0] add_ln101_reg_700;
wire   [7:0] B_fu_476_p3;
reg   [7:0] B_reg_705;
wire   [15:0] y_fu_484_p2;
reg   [15:0] y_reg_710;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [15:0] ap_phi_mux_x_0_phi_fu_220_p4;
reg   [15:0] ap_phi_mux_y_0_phi_fu_232_p4;
wire   [63:0] zext_ln103_1_fu_490_p1;
wire   [8:0] zext_ln97_fu_257_p1;
wire   [0:0] icmp_ln88_fu_273_p2;
wire   [15:0] x_fu_267_p2;
wire   [12:0] trunc_ln103_fu_294_p1;
wire   [14:0] trunc_ln103_1_fu_306_p1;
wire   [22:0] zext_ln103_1_cast_fu_310_p3;
wire   [22:0] zext_ln103_cast_fu_298_p3;
wire   [15:0] select_ln94_fu_278_p3;
wire   [22:0] add_ln103_fu_318_p2;
wire   [22:0] zext_ln103_fu_324_p1;
wire  signed [7:0] E_fu_339_p2;
wire   [1:0] tmp_fu_358_p4;
wire  signed [7:0] D_fu_334_p2;
wire  signed [7:0] mul_ln101_1_fu_377_p1;
wire   [16:0] shl_ln_fu_383_p3;
wire   [9:0] shl_ln102_1_fu_395_p3;
wire  signed [17:0] sext_ln102_fu_391_p1;
wire  signed [17:0] sext_ln102_1_fu_403_p1;
wire  signed [17:0] add_ln102_1_fu_407_p2;
wire  signed [18:0] sext_ln100_1_fu_355_p1;
wire  signed [18:0] sext_ln102_2_fu_413_p1;
wire   [18:0] add_ln102_fu_422_p2;
wire   [2:0] tmp_5_fu_428_p4;
(* use_dsp48 = "no" *) wire   [17:0] add_ln102_2_fu_417_p2;
wire   [0:0] icmp_ln102_fu_438_p2;
wire   [0:0] tmp_6_fu_444_p3;
wire   [0:0] or_ln102_fu_470_p2;
wire   [7:0] select_ln102_fu_462_p3;
wire   [7:0] trunc_ln4_fu_452_p4;
wire   [0:0] tmp_1_fu_496_p3;
wire   [0:0] or_ln100_fu_519_p2;
wire   [7:0] select_ln100_fu_512_p3;
wire   [7:0] trunc_ln_fu_503_p4;
wire  signed [17:0] sext_ln101_3_fu_533_p1;
(* use_dsp48 = "no" *) wire   [17:0] add_ln101_1_fu_536_p2;
wire   [1:0] tmp_3_fu_541_p4;
wire   [0:0] icmp_ln101_fu_551_p2;
wire   [0:0] tmp_4_fu_557_p3;
wire   [0:0] or_ln101_fu_583_p2;
wire   [7:0] select_ln101_fu_575_p3;
wire   [7:0] trunc_ln3_fu_565_p4;
wire   [15:0] bound_fu_598_p0;
wire   [15:0] bound_fu_598_p1;
wire   [9:0] grp_fu_604_p0;
wire   [8:0] grp_fu_604_p2;
wire   [9:0] grp_fu_614_p0;
wire  signed [7:0] grp_fu_623_p0;
wire   [16:0] grp_fu_623_p2;
wire    ap_CS_fsm_state8;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] bound_fu_598_p00;
wire   [31:0] bound_fu_598_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

yuv_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yuv_filter_mul_mubkb_U42(
    .din0(bound_fu_598_p0),
    .din1(bound_fu_598_p1),
    .dout(bound_fu_598_p2)
);

yuv_filter_mac_mug8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
yuv_filter_mac_mug8j_U43(
    .din0(grp_fu_604_p0),
    .din1(C_reg_668),
    .din2(grp_fu_604_p2),
    .dout(grp_fu_604_p3)
);

yuv_filter_mac_muhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
yuv_filter_mac_muhbi_U44(
    .din0(grp_fu_614_p0),
    .din1(E_fu_339_p2),
    .din2(grp_fu_604_p3),
    .dout(grp_fu_614_p3)
);

yuv_filter_mac_muibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
yuv_filter_mac_muibs_U45(
    .din0(grp_fu_623_p0),
    .din1(D_fu_334_p2),
    .din2(grp_fu_623_p2),
    .dout(grp_fu_623_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_205 <= add_ln85_fu_251_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_205 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_reg_649_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_0_reg_216 <= select_ln94_1_reg_673;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_0_reg_216 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_reg_649_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_0_reg_228 <= y_reg_710;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_0_reg_228 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_reg_649_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_reg_705 <= B_fu_476_p3;
        add_ln103_1_reg_678 <= add_ln103_1_fu_328_p2;
        icmp_ln100_reg_694 <= icmp_ln100_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_reg_649 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        C_reg_668 <= C_fu_261_p2;
        U_reg_658 <= in_channels_ch2_dout;
        V_reg_663 <= in_channels_ch3_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_reg_649_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln100_1_reg_688 <= grp_fu_614_p3;
        add_ln100_reg_683 <= grp_fu_604_p3;
        add_ln101_reg_700 <= grp_fu_623_p3;
        select_ln94_1_reg_673 <= select_ln94_1_fu_286_p3;
        y_reg_710 <= y_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_644 <= bound_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (in_height_empty_n == 1'b0) | (in_width_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_reg_637 <= in_height_dout;
        width_reg_631 <= in_width_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln85_reg_649 <= icmp_ln85_fu_246_p2;
        icmp_ln85_reg_649_pp0_iter1_reg <= icmp_ln85_reg_649;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln85_reg_649_pp0_iter2_reg <= icmp_ln85_reg_649_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((icmp_ln85_fu_246_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_649_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_x_0_phi_fu_220_p4 = select_ln94_1_reg_673;
    end else begin
        ap_phi_mux_x_0_phi_fu_220_p4 = x_0_reg_216;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_649_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_y_0_phi_fu_232_p4 = y_reg_710;
    end else begin
        ap_phi_mux_y_0_phi_fu_232_p4 = y_0_reg_228;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_649 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_channels_ch1_blk_n = in_channels_ch1_empty_n;
    end else begin
        in_channels_ch1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_649 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch1_read = 1'b1;
    end else begin
        in_channels_ch1_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_649 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_channels_ch2_blk_n = in_channels_ch2_empty_n;
    end else begin
        in_channels_ch2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_649 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch2_read = 1'b1;
    end else begin
        in_channels_ch2_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_649 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_channels_ch3_blk_n = in_channels_ch3_empty_n;
    end else begin
        in_channels_ch3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_649 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch3_read = 1'b1;
    end else begin
        in_channels_ch3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_height_blk_n = in_height_empty_n;
    end else begin
        in_height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (in_height_empty_n == 1'b0) | (in_width_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_height_read = 1'b1;
    end else begin
        in_height_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_width_blk_n = in_width_empty_n;
    end else begin
        in_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (in_height_empty_n == 1'b0) | (in_width_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_width_read = 1'b1;
    end else begin
        in_width_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_649_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_649_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_649_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_height_ap_vld = 1'b1;
    end else begin
        out_height_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_width_ap_vld = 1'b1;
    end else begin
        out_width_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (in_height_empty_n == 1'b0) | (in_width_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln85_fu_246_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln85_fu_246_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_fu_476_p3 = ((or_ln102_fu_470_p2[0:0] === 1'b1) ? select_ln102_fu_462_p3 : trunc_ln4_fu_452_p4);

assign C_fu_261_p2 = ($signed(9'd496) + $signed(zext_ln97_fu_257_p1));

assign D_fu_334_p2 = (8'd128 ^ U_reg_658);

assign E_fu_339_p2 = (8'd128 ^ V_reg_663);

assign add_ln101_1_fu_536_p2 = ($signed(sext_ln101_3_fu_533_p1) + $signed(add_ln100_reg_683));

assign add_ln102_1_fu_407_p2 = ($signed(sext_ln102_fu_391_p1) + $signed(sext_ln102_1_fu_403_p1));

assign add_ln102_2_fu_417_p2 = ($signed(add_ln102_1_fu_407_p2) + $signed(grp_fu_604_p3));

assign add_ln102_fu_422_p2 = ($signed(sext_ln100_1_fu_355_p1) + $signed(sext_ln102_2_fu_413_p1));

assign add_ln103_1_fu_328_p2 = (add_ln103_fu_318_p2 + zext_ln103_fu_324_p1);

assign add_ln103_fu_318_p2 = (zext_ln103_1_cast_fu_310_p3 + zext_ln103_cast_fu_298_p3);

assign add_ln85_fu_251_p2 = (indvar_flatten_reg_205 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln85_reg_649 == 1'd0) & (in_channels_ch3_empty_n == 1'b0)) | ((icmp_ln85_reg_649 == 1'd0) & (in_channels_ch2_empty_n == 1'b0)) | ((icmp_ln85_reg_649 == 1'd0) & (in_channels_ch1_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln85_reg_649 == 1'd0) & (in_channels_ch3_empty_n == 1'b0)) | ((icmp_ln85_reg_649 == 1'd0) & (in_channels_ch2_empty_n == 1'b0)) | ((icmp_ln85_reg_649 == 1'd0) & (in_channels_ch1_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (in_height_empty_n == 1'b0) | (in_width_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln85_reg_649 == 1'd0) & (in_channels_ch3_empty_n == 1'b0)) | ((icmp_ln85_reg_649 == 1'd0) & (in_channels_ch2_empty_n == 1'b0)) | ((icmp_ln85_reg_649 == 1'd0) & (in_channels_ch1_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_598_p0 = bound_fu_598_p00;

assign bound_fu_598_p00 = height_reg_637;

assign bound_fu_598_p1 = bound_fu_598_p10;

assign bound_fu_598_p10 = width_reg_631;

assign grp_fu_604_p0 = 18'd298;

assign grp_fu_604_p2 = 18'd128;

assign grp_fu_614_p0 = 18'd409;

assign grp_fu_623_p0 = 16'd65436;

assign grp_fu_623_p2 = ($signed(17'd130864) * $signed(mul_ln101_1_fu_377_p1));

assign icmp_ln100_fu_367_p2 = ((tmp_fu_358_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln101_fu_551_p2 = ((tmp_3_fu_541_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_438_p2 = (($signed(tmp_5_fu_428_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_246_p2 = ((indvar_flatten_reg_205 == bound_reg_644) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_273_p2 = ((ap_phi_mux_y_0_phi_fu_232_p4 == height_reg_637) ? 1'b1 : 1'b0);

assign mul_ln101_1_fu_377_p1 = E_fu_339_p2;

assign or_ln100_fu_519_p2 = (tmp_1_fu_496_p3 | icmp_ln100_reg_694);

assign or_ln101_fu_583_p2 = (tmp_4_fu_557_p3 | icmp_ln101_fu_551_p2);

assign or_ln102_fu_470_p2 = (tmp_6_fu_444_p3 | icmp_ln102_fu_438_p2);

assign out_channels_ch1_address0 = zext_ln103_1_fu_490_p1;

assign out_channels_ch1_d0 = ((or_ln100_fu_519_p2[0:0] === 1'b1) ? select_ln100_fu_512_p3 : trunc_ln_fu_503_p4);

assign out_channels_ch2_address0 = zext_ln103_1_fu_490_p1;

assign out_channels_ch2_d0 = ((or_ln101_fu_583_p2[0:0] === 1'b1) ? select_ln101_fu_575_p3 : trunc_ln3_fu_565_p4);

assign out_channels_ch3_address0 = zext_ln103_1_fu_490_p1;

assign out_channels_ch3_d0 = B_reg_705;

assign out_height = height_reg_637;

assign out_width = width_reg_631;

assign select_ln100_fu_512_p3 = ((icmp_ln100_reg_694[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln101_fu_575_p3 = ((icmp_ln101_fu_551_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln102_fu_462_p3 = ((icmp_ln102_fu_438_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln94_1_fu_286_p3 = ((icmp_ln88_fu_273_p2[0:0] === 1'b1) ? x_fu_267_p2 : ap_phi_mux_x_0_phi_fu_220_p4);

assign select_ln94_fu_278_p3 = ((icmp_ln88_fu_273_p2[0:0] === 1'b1) ? 16'd0 : ap_phi_mux_y_0_phi_fu_232_p4);

assign sext_ln100_1_fu_355_p1 = grp_fu_604_p3;

assign sext_ln101_3_fu_533_p1 = add_ln101_reg_700;

assign sext_ln102_1_fu_403_p1 = $signed(shl_ln102_1_fu_395_p3);

assign sext_ln102_2_fu_413_p1 = add_ln102_1_fu_407_p2;

assign sext_ln102_fu_391_p1 = $signed(shl_ln_fu_383_p3);

assign shl_ln102_1_fu_395_p3 = {{D_fu_334_p2}, {2'd0}};

assign shl_ln_fu_383_p3 = {{D_fu_334_p2}, {9'd0}};

assign tmp_1_fu_496_p3 = add_ln100_1_reg_688[32'd17];

assign tmp_3_fu_541_p4 = {{add_ln101_1_fu_536_p2[17:16]}};

assign tmp_4_fu_557_p3 = add_ln101_1_fu_536_p2[32'd17];

assign tmp_5_fu_428_p4 = {{add_ln102_fu_422_p2[18:16]}};

assign tmp_6_fu_444_p3 = add_ln102_fu_422_p2[32'd18];

assign tmp_fu_358_p4 = {{grp_fu_614_p3[17:16]}};

assign trunc_ln103_1_fu_306_p1 = select_ln94_1_fu_286_p3[14:0];

assign trunc_ln103_fu_294_p1 = select_ln94_1_fu_286_p3[12:0];

assign trunc_ln3_fu_565_p4 = {{add_ln101_1_fu_536_p2[15:8]}};

assign trunc_ln4_fu_452_p4 = {{add_ln102_2_fu_417_p2[15:8]}};

assign trunc_ln_fu_503_p4 = {{add_ln100_1_reg_688[15:8]}};

assign x_fu_267_p2 = (16'd1 + ap_phi_mux_x_0_phi_fu_220_p4);

assign y_fu_484_p2 = (16'd1 + select_ln94_fu_278_p3);

assign zext_ln103_1_cast_fu_310_p3 = {{trunc_ln103_1_fu_306_p1}, {8'd0}};

assign zext_ln103_1_fu_490_p1 = add_ln103_1_reg_678;

assign zext_ln103_cast_fu_298_p3 = {{trunc_ln103_fu_294_p1}, {10'd0}};

assign zext_ln103_fu_324_p1 = select_ln94_fu_278_p3;

assign zext_ln97_fu_257_p1 = in_channels_ch1_dout;

endmodule //yuv2rgb
