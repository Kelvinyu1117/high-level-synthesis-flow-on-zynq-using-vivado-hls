-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rgb2yuv11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_full_n : IN STD_LOGIC;
    out_channels_ch1_write : OUT STD_LOGIC;
    out_channels_ch2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_full_n : IN STD_LOGIC;
    out_channels_ch2_write : OUT STD_LOGIC;
    out_channels_ch3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_full_n : IN STD_LOGIC;
    out_channels_ch3_write : OUT STD_LOGIC;
    out_width_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_width_full_n : IN STD_LOGIC;
    out_width_write : OUT STD_LOGIC;
    out_height_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_height_full_n : IN STD_LOGIC;
    out_height_write : OUT STD_LOGIC;
    Y_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    U_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    V_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    Y_scale_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    Y_scale_out_full_n : IN STD_LOGIC;
    Y_scale_out_write : OUT STD_LOGIC;
    U_scale_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    U_scale_out_full_n : IN STD_LOGIC;
    U_scale_out_write : OUT STD_LOGIC;
    V_scale_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    V_scale_out_full_n : IN STD_LOGIC;
    V_scale_out_write : OUT STD_LOGIC );
end;


architecture behav of rgb2yuv11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_80 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv15_7FDA : STD_LOGIC_VECTOR (14 downto 0) := "111111111011010";
    constant ap_const_lv15_80 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_const_lv15_7A : STD_LOGIC_VECTOR (14 downto 0) := "000000001111010";
    constant ap_const_lv16_FFB6 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110110110";
    constant ap_const_lv16_FFA2 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110100010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal out_channels_ch1_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln45_reg_665 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_665_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_channels_ch2_blk_n : STD_LOGIC;
    signal out_channels_ch3_blk_n : STD_LOGIC;
    signal out_width_blk_n : STD_LOGIC;
    signal out_height_blk_n : STD_LOGIC;
    signal Y_scale_out_blk_n : STD_LOGIC;
    signal U_scale_out_blk_n : STD_LOGIC;
    signal V_scale_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_0_i_i_reg_277 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_0_i_i_reg_288 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal bound_fu_606_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln45_reg_665_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_665_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_665_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_665_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln45_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln54_1_fu_337_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln54_1_reg_674 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln54_1_fu_379_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln54_1_reg_679 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_fu_385_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal R_reg_704 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_711 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_711_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_718 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_726 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln58_1_fu_519_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln58_1_fu_519_p2 : signal is "no";
    signal add_ln58_1_reg_731 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln59_1_fu_559_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln59_1_fu_559_p2 : signal is "no";
    signal add_ln59_1_reg_736 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_phi_mux_x_0_i_i_phi_fu_281_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln54_1_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln48_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_318_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln54_fu_345_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln54_1_fu_357_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln54_cast_fu_349_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln54_2_cast_fu_361_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln54_fu_329_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln54_fu_375_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln54_fu_369_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln_fu_400_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln57_1_fu_411_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln57_2_fu_425_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln57_1_fu_418_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln57_fu_439_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln57_6_fu_445_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln57_fu_407_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln57_1_fu_449_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln57_4_fu_432_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln57_7_fu_455_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_612_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln57_8_fu_465_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln57_2_fu_459_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln57_4_fu_468_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1_fu_484_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln58_1_fu_495_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln58_fu_491_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln58_2_fu_506_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_621_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln58_fu_510_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln58_fu_516_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln58_1_fu_502_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln59_fu_525_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln2_fu_535_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln59_fu_531_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln59_1_fu_542_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln59_1_fu_546_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_630_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln59_2_fu_556_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln59_1_fu_552_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_639_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln5_fu_574_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_647_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln6_fu_590_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_606_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_606_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_612_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_612_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_612_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_621_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_621_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln59_fu_397_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_621_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_630_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_630_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_630_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_639_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_639_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln57_2_fu_565_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_647_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_647_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_606_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_606_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_612_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_612_p20 : STD_LOGIC_VECTOR (12 downto 0);

    component yuv_filter_mul_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component yuv_filter_mac_mucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component yuv_filter_mac_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component yuv_filter_mac_mueOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component yuv_filter_mac_mufYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    yuv_filter_mul_mubkb_U1 : component yuv_filter_mul_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bound_fu_606_p0,
        din1 => bound_fu_606_p1,
        dout => bound_fu_606_p2);

    yuv_filter_mac_mucud_U2 : component yuv_filter_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_612_p0,
        din1 => grp_fu_612_p1,
        din2 => grp_fu_612_p2,
        dout => grp_fu_612_p3);

    yuv_filter_mac_mudEe_U3 : component yuv_filter_mac_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_621_p0,
        din1 => grp_fu_621_p1,
        din2 => grp_fu_621_p2,
        dout => grp_fu_621_p3);

    yuv_filter_mac_mueOg_U4 : component yuv_filter_mac_mueOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_630_p0,
        din1 => grp_fu_630_p1,
        din2 => grp_fu_630_p2,
        dout => grp_fu_630_p3);

    yuv_filter_mac_mufYi_U5 : component yuv_filter_mac_mufYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_639_p0,
        din1 => grp_fu_639_p1,
        din2 => add_ln58_1_reg_731,
        dout => grp_fu_639_p3);

    yuv_filter_mac_mufYi_U6 : component yuv_filter_mac_mufYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_647_p0,
        din1 => grp_fu_647_p1,
        din2 => add_ln59_1_reg_736,
        dout => grp_fu_647_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = V_scale_out_full_n) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = Y_scale_out_full_n) or (out_height_full_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif ((not(((ap_const_logic_0 = V_scale_out_full_n) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = Y_scale_out_full_n) or (out_height_full_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_fu_307_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_266 <= add_ln45_fu_312_p2;
            elsif ((not(((ap_const_logic_0 = V_scale_out_full_n) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = Y_scale_out_full_n) or (out_height_full_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_266 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_0_i_i_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_665 = ap_const_lv1_0))) then 
                x_0_i_i_reg_277 <= select_ln54_1_reg_674;
            elsif ((not(((ap_const_logic_0 = V_scale_out_full_n) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = Y_scale_out_full_n) or (out_height_full_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_0_i_i_reg_277 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_0_i_i_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_fu_307_p2 = ap_const_lv1_0))) then 
                y_0_i_i_reg_288 <= y_fu_385_p2;
            elsif ((not(((ap_const_logic_0 = V_scale_out_full_n) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = Y_scale_out_full_n) or (out_height_full_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_0_i_i_reg_288 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_665_pp0_iter3_reg = ap_const_lv1_0))) then
                B_reg_718 <= in_channels_ch3_q0;
                G_reg_711 <= in_channels_ch2_q0;
                R_reg_704 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                G_reg_711_pp0_iter5_reg <= G_reg_711;
                icmp_ln45_reg_665_pp0_iter2_reg <= icmp_ln45_reg_665_pp0_iter1_reg;
                icmp_ln45_reg_665_pp0_iter3_reg <= icmp_ln45_reg_665_pp0_iter2_reg;
                icmp_ln45_reg_665_pp0_iter4_reg <= icmp_ln45_reg_665_pp0_iter3_reg;
                icmp_ln45_reg_665_pp0_iter5_reg <= icmp_ln45_reg_665_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_fu_307_p2 = ap_const_lv1_0))) then
                add_ln54_1_reg_679 <= add_ln54_1_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_665_pp0_iter4_reg = ap_const_lv1_0))) then
                add_ln58_1_reg_731 <= add_ln58_1_fu_519_p2;
                add_ln59_1_reg_736 <= add_ln59_1_fu_559_p2;
                trunc_ln_reg_726 <= add_ln57_4_fu_468_p2(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = V_scale_out_full_n) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = Y_scale_out_full_n) or (out_height_full_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_660 <= bound_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln45_reg_665 <= icmp_ln45_fu_307_p2;
                icmp_ln45_reg_665_pp0_iter1_reg <= icmp_ln45_reg_665;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_fu_307_p2 = ap_const_lv1_0))) then
                select_ln54_1_reg_674 <= select_ln54_1_fu_337_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n, ap_enable_reg_pp0_iter6, icmp_ln45_fu_307_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = V_scale_out_full_n) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = Y_scale_out_full_n) or (out_height_full_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln45_fu_307_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln45_fu_307_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    U_scale_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, U_scale_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            U_scale_out_blk_n <= U_scale_out_full_n;
        else 
            U_scale_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    U_scale_out_din <= U_scale;

    U_scale_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = V_scale_out_full_n) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = Y_scale_out_full_n) or (out_height_full_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            U_scale_out_write <= ap_const_logic_1;
        else 
            U_scale_out_write <= ap_const_logic_0;
        end if; 
    end process;


    V_scale_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, V_scale_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            V_scale_out_blk_n <= V_scale_out_full_n;
        else 
            V_scale_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_scale_out_din <= V_scale;

    V_scale_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = V_scale_out_full_n) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = Y_scale_out_full_n) or (out_height_full_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            V_scale_out_write <= ap_const_logic_1;
        else 
            V_scale_out_write <= ap_const_logic_0;
        end if; 
    end process;


    Y_scale_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, Y_scale_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Y_scale_out_blk_n <= Y_scale_out_full_n;
        else 
            Y_scale_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Y_scale_out_din <= Y_scale;

    Y_scale_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = V_scale_out_full_n) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = Y_scale_out_full_n) or (out_height_full_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Y_scale_out_write <= ap_const_logic_1;
        else 
            Y_scale_out_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln45_fu_312_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_266) + unsigned(ap_const_lv32_1));
    add_ln54_1_fu_379_p2 <= std_logic_vector(unsigned(zext_ln54_fu_375_p1) + unsigned(add_ln54_fu_369_p2));
    add_ln54_fu_369_p2 <= std_logic_vector(unsigned(zext_ln54_cast_fu_349_p3) + unsigned(zext_ln54_2_cast_fu_361_p3));
    add_ln57_1_fu_449_p2 <= std_logic_vector(unsigned(zext_ln57_6_fu_445_p1) + unsigned(zext_ln57_fu_407_p1));
    add_ln57_2_fu_459_p2 <= std_logic_vector(unsigned(zext_ln57_4_fu_432_p1) + unsigned(zext_ln57_7_fu_455_p1));
    add_ln57_4_fu_468_p2 <= std_logic_vector(unsigned(zext_ln57_8_fu_465_p1) + unsigned(add_ln57_2_fu_459_p2));
    add_ln57_fu_439_p2 <= std_logic_vector(unsigned(ap_const_lv10_80) + unsigned(zext_ln57_1_fu_418_p1));
    add_ln58_1_fu_519_p2 <= std_logic_vector(unsigned(sub_ln58_fu_510_p2) + unsigned(sext_ln58_fu_516_p1));
    add_ln59_1_fu_559_p2 <= std_logic_vector(unsigned(zext_ln59_2_fu_556_p1) + unsigned(sext_ln59_1_fu_552_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state9 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_enable_reg_pp0_iter6, icmp_ln45_reg_665_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (((out_channels_ch3_full_n = ap_const_logic_0) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0)) or ((out_channels_ch2_full_n = ap_const_logic_0) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0)) or ((out_channels_ch1_full_n = ap_const_logic_0) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_enable_reg_pp0_iter6, icmp_ln45_reg_665_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (((out_channels_ch3_full_n = ap_const_logic_0) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0)) or ((out_channels_ch2_full_n = ap_const_logic_0) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0)) or ((out_channels_ch1_full_n = ap_const_logic_0) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_enable_reg_pp0_iter6, icmp_ln45_reg_665_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (((out_channels_ch3_full_n = ap_const_logic_0) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0)) or ((out_channels_ch2_full_n = ap_const_logic_0) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0)) or ((out_channels_ch1_full_n = ap_const_logic_0) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = V_scale_out_full_n) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = Y_scale_out_full_n) or (out_height_full_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter6_assign_proc : process(out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, icmp_ln45_reg_665_pp0_iter5_reg)
    begin
                ap_block_state8_pp0_stage0_iter6 <= (((out_channels_ch3_full_n = ap_const_logic_0) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0)) or ((out_channels_ch2_full_n = ap_const_logic_0) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0)) or ((out_channels_ch1_full_n = ap_const_logic_0) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln45_fu_307_p2)
    begin
        if ((icmp_ln45_fu_307_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_x_0_i_i_phi_fu_281_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln45_reg_665, x_0_i_i_reg_277, ap_CS_fsm_pp0_stage0, select_ln54_1_reg_674, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln45_reg_665 = ap_const_lv1_0))) then 
            ap_phi_mux_x_0_i_i_phi_fu_281_p4 <= select_ln54_1_reg_674;
        else 
            ap_phi_mux_x_0_i_i_phi_fu_281_p4 <= x_0_i_i_reg_277;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_606_p0 <= bound_fu_606_p00(16 - 1 downto 0);
    bound_fu_606_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_height),32));
    bound_fu_606_p1 <= bound_fu_606_p10(16 - 1 downto 0);
    bound_fu_606_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_width),32));
    grp_fu_612_p0 <= ap_const_lv13_19(6 - 1 downto 0);
    grp_fu_612_p1 <= grp_fu_612_p10(8 - 1 downto 0);
    grp_fu_612_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_reg_718),13));
    grp_fu_612_p2 <= grp_fu_612_p20(8 - 1 downto 0);
    grp_fu_612_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_reg_711),13));
    grp_fu_621_p0 <= ap_const_lv15_7FDA(7 - 1 downto 0);
    grp_fu_621_p1 <= zext_ln59_fu_397_p1(8 - 1 downto 0);
    grp_fu_621_p2 <= ap_const_lv15_80(9 - 1 downto 0);
    grp_fu_630_p0 <= ap_const_lv15_7A(8 - 1 downto 0);
    grp_fu_630_p1 <= zext_ln59_fu_397_p1(8 - 1 downto 0);
    grp_fu_630_p2 <= ap_const_lv15_80(9 - 1 downto 0);
    grp_fu_639_p0 <= ap_const_lv16_FFB6(8 - 1 downto 0);
    grp_fu_639_p1 <= zext_ln57_2_fu_565_p1(8 - 1 downto 0);
    grp_fu_647_p0 <= ap_const_lv16_FFA2(8 - 1 downto 0);
    grp_fu_647_p1 <= zext_ln57_2_fu_565_p1(8 - 1 downto 0);
    icmp_ln45_fu_307_p2 <= "1" when (indvar_flatten_reg_266 = bound_reg_660) else "0";
    icmp_ln48_fu_324_p2 <= "1" when (y_0_i_i_reg_288 = in_height) else "0";
    in_channels_ch1_address0 <= zext_ln54_1_fu_391_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= zext_ln54_1_fu_391_p1(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= zext_ln54_1_fu_391_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch1_blk_n_assign_proc : process(out_channels_ch1_full_n, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, icmp_ln45_reg_665_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0))) then 
            out_channels_ch1_blk_n <= out_channels_ch1_full_n;
        else 
            out_channels_ch1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch1_din <= std_logic_vector(unsigned(ap_const_lv8_10) + unsigned(trunc_ln_reg_726));

    out_channels_ch1_write_assign_proc : process(ap_enable_reg_pp0_iter6, icmp_ln45_reg_665_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0))) then 
            out_channels_ch1_write <= ap_const_logic_1;
        else 
            out_channels_ch1_write <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch2_blk_n_assign_proc : process(out_channels_ch2_full_n, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, icmp_ln45_reg_665_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0))) then 
            out_channels_ch2_blk_n <= out_channels_ch2_full_n;
        else 
            out_channels_ch2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch2_din <= (trunc_ln5_fu_574_p4 xor ap_const_lv8_80);

    out_channels_ch2_write_assign_proc : process(ap_enable_reg_pp0_iter6, icmp_ln45_reg_665_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0))) then 
            out_channels_ch2_write <= ap_const_logic_1;
        else 
            out_channels_ch2_write <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch3_blk_n_assign_proc : process(out_channels_ch3_full_n, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, icmp_ln45_reg_665_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0))) then 
            out_channels_ch3_blk_n <= out_channels_ch3_full_n;
        else 
            out_channels_ch3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch3_din <= (trunc_ln6_fu_590_p4 xor ap_const_lv8_80);

    out_channels_ch3_write_assign_proc : process(ap_enable_reg_pp0_iter6, icmp_ln45_reg_665_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_665_pp0_iter5_reg = ap_const_lv1_0))) then 
            out_channels_ch3_write <= ap_const_logic_1;
        else 
            out_channels_ch3_write <= ap_const_logic_0;
        end if; 
    end process;


    out_height_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_height_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_height_blk_n <= out_height_full_n;
        else 
            out_height_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_height_din <= in_height;

    out_height_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = V_scale_out_full_n) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = Y_scale_out_full_n) or (out_height_full_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_height_write <= ap_const_logic_1;
        else 
            out_height_write <= ap_const_logic_0;
        end if; 
    end process;


    out_width_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_width_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_width_blk_n <= out_width_full_n;
        else 
            out_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_width_din <= in_width;

    out_width_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = V_scale_out_full_n) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = Y_scale_out_full_n) or (out_height_full_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_width_write <= ap_const_logic_1;
        else 
            out_width_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln54_1_fu_337_p3 <= 
        x_fu_318_p2 when (icmp_ln48_fu_324_p2(0) = '1') else 
        ap_phi_mux_x_0_i_i_phi_fu_281_p4;
    select_ln54_fu_329_p3 <= 
        ap_const_lv16_0 when (icmp_ln48_fu_324_p2(0) = '1') else 
        y_0_i_i_reg_288;
        sext_ln58_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_621_p3),16));

        sext_ln59_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln59_1_fu_546_p2),16));

        sext_ln59_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln59_fu_525_p2),14));

    shl_ln1_fu_484_p3 <= (B_reg_718 & ap_const_lv7_0);
    shl_ln2_fu_535_p3 <= (B_reg_718 & ap_const_lv1_0);
    shl_ln57_1_fu_411_p3 <= (R_reg_704 & ap_const_lv1_0);
    shl_ln57_2_fu_425_p3 <= (G_reg_711 & ap_const_lv7_0);
    shl_ln58_1_fu_495_p3 <= (B_reg_718 & ap_const_lv4_0);
    shl_ln_fu_400_p3 <= (R_reg_704 & ap_const_lv6_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln58_fu_510_p2 <= std_logic_vector(unsigned(zext_ln58_fu_491_p1) - unsigned(zext_ln58_2_fu_506_p1));
    sub_ln59_1_fu_546_p2 <= std_logic_vector(signed(sext_ln59_fu_531_p1) - signed(zext_ln59_1_fu_542_p1));
    sub_ln59_fu_525_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(zext_ln58_1_fu_502_p1));
    trunc_ln54_1_fu_357_p1 <= select_ln54_1_fu_337_p3(15 - 1 downto 0);
    trunc_ln54_fu_345_p1 <= select_ln54_1_fu_337_p3(13 - 1 downto 0);
    trunc_ln5_fu_574_p4 <= grp_fu_639_p3(15 downto 8);
    trunc_ln6_fu_590_p4 <= grp_fu_647_p3(15 downto 8);
    x_fu_318_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(ap_phi_mux_x_0_i_i_phi_fu_281_p4));
    y_fu_385_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(select_ln54_fu_329_p3));
    zext_ln54_1_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_1_reg_679),64));
    zext_ln54_2_cast_fu_361_p3 <= (trunc_ln54_1_fu_357_p1 & ap_const_lv8_0);
    zext_ln54_cast_fu_349_p3 <= (trunc_ln54_fu_345_p1 & ap_const_lv10_0);
    zext_ln54_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_fu_329_p3),23));
    zext_ln57_1_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln57_1_fu_411_p3),10));
    zext_ln57_2_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_reg_711_pp0_iter5_reg),16));
    zext_ln57_4_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln57_2_fu_425_p3),16));
    zext_ln57_6_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_439_p2),15));
    zext_ln57_7_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_1_fu_449_p2),16));
    zext_ln57_8_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_612_p3),16));
    zext_ln57_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_400_p3),15));
    zext_ln58_1_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln58_1_fu_495_p3),13));
    zext_ln58_2_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln58_1_fu_495_p3),16));
    zext_ln58_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_484_p3),16));
    zext_ln59_1_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_535_p3),14));
    zext_ln59_2_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_630_p3),16));
    zext_ln59_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(R_reg_704),15));
end behav;
