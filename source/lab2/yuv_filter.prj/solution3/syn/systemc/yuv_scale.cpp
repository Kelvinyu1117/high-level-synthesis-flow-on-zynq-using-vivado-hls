// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "yuv_scale.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic yuv_scale::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic yuv_scale::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> yuv_scale::ap_ST_fsm_state1 = "1";
const sc_lv<4> yuv_scale::ap_ST_fsm_state2 = "10";
const sc_lv<4> yuv_scale::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> yuv_scale::ap_ST_fsm_state6 = "1000";
const bool yuv_scale::ap_const_boolean_1 = true;
const sc_lv<32> yuv_scale::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> yuv_scale::ap_const_lv32_2 = "10";
const bool yuv_scale::ap_const_boolean_0 = false;
const sc_lv<1> yuv_scale::ap_const_lv1_0 = "0";
const sc_lv<32> yuv_scale::ap_const_lv32_1 = "1";
const sc_lv<1> yuv_scale::ap_const_lv1_1 = "1";
const sc_lv<32> yuv_scale::ap_const_lv32_7 = "111";
const sc_lv<32> yuv_scale::ap_const_lv32_E = "1110";
const sc_lv<32> yuv_scale::ap_const_lv32_3 = "11";

yuv_scale::yuv_scale(sc_module_name name) : sc_module(name), mVcdFile(0) {
    yuv_filter_mul_mubkb_U28 = new yuv_filter_mul_mubkb<1,1,16,16,32>("yuv_filter_mul_mubkb_U28");
    yuv_filter_mul_mubkb_U28->din0(bound_fu_259_p0);
    yuv_filter_mul_mubkb_U28->din1(bound_fu_259_p1);
    yuv_filter_mul_mubkb_U28->dout(bound_fu_259_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_U_scale_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( U_scale_empty_n );

    SC_METHOD(thread_U_scale_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_width_empty_n );
    sensitive << ( in_height_empty_n );
    sensitive << ( out_width_full_n );
    sensitive << ( out_height_full_n );
    sensitive << ( Y_scale_empty_n );
    sensitive << ( U_scale_empty_n );
    sensitive << ( V_scale_empty_n );

    SC_METHOD(thread_V_scale_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( V_scale_empty_n );

    SC_METHOD(thread_V_scale_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_width_empty_n );
    sensitive << ( in_height_empty_n );
    sensitive << ( out_width_full_n );
    sensitive << ( out_height_full_n );
    sensitive << ( Y_scale_empty_n );
    sensitive << ( U_scale_empty_n );
    sensitive << ( V_scale_empty_n );

    SC_METHOD(thread_Y_scale_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( Y_scale_empty_n );

    SC_METHOD(thread_Y_scale_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_width_empty_n );
    sensitive << ( in_height_empty_n );
    sensitive << ( out_width_full_n );
    sensitive << ( out_height_full_n );
    sensitive << ( Y_scale_empty_n );
    sensitive << ( U_scale_empty_n );
    sensitive << ( V_scale_empty_n );

    SC_METHOD(thread_add_ln129_fu_196_p2);
    sensitive << ( indvar_flatten_reg_165 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in_channels_ch1_empty_n );
    sensitive << ( in_channels_ch2_empty_n );
    sensitive << ( in_channels_ch3_empty_n );
    sensitive << ( out_channels_ch1_full_n );
    sensitive << ( out_channels_ch2_full_n );
    sensitive << ( out_channels_ch3_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln129_reg_310 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln129_reg_310_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in_channels_ch1_empty_n );
    sensitive << ( in_channels_ch2_empty_n );
    sensitive << ( in_channels_ch3_empty_n );
    sensitive << ( out_channels_ch1_full_n );
    sensitive << ( out_channels_ch2_full_n );
    sensitive << ( out_channels_ch3_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln129_reg_310 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln129_reg_310_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in_channels_ch1_empty_n );
    sensitive << ( in_channels_ch2_empty_n );
    sensitive << ( in_channels_ch3_empty_n );
    sensitive << ( out_channels_ch1_full_n );
    sensitive << ( out_channels_ch2_full_n );
    sensitive << ( out_channels_ch3_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln129_reg_310 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln129_reg_310_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( in_width_empty_n );
    sensitive << ( in_height_empty_n );
    sensitive << ( out_width_full_n );
    sensitive << ( out_height_full_n );
    sensitive << ( Y_scale_empty_n );
    sensitive << ( U_scale_empty_n );
    sensitive << ( V_scale_empty_n );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( in_channels_ch1_empty_n );
    sensitive << ( in_channels_ch2_empty_n );
    sensitive << ( in_channels_ch3_empty_n );
    sensitive << ( icmp_ln129_reg_310 );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter2);
    sensitive << ( out_channels_ch1_full_n );
    sensitive << ( out_channels_ch2_full_n );
    sensitive << ( out_channels_ch3_full_n );
    sensitive << ( icmp_ln129_reg_310_pp0_iter1_reg );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( icmp_ln129_fu_191_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_bound_fu_259_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bound_fu_259_p00 );

    SC_METHOD(thread_bound_fu_259_p00);
    sensitive << ( height_reg_285 );

    SC_METHOD(thread_bound_fu_259_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bound_fu_259_p10 );

    SC_METHOD(thread_bound_fu_259_p10);
    sensitive << ( width_reg_280 );

    SC_METHOD(thread_icmp_ln129_fu_191_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_165 );
    sensitive << ( bound_reg_305 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_in_channels_ch1_blk_n);
    sensitive << ( in_channels_ch1_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln129_reg_310 );

    SC_METHOD(thread_in_channels_ch1_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln129_reg_310 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_channels_ch2_blk_n);
    sensitive << ( in_channels_ch2_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln129_reg_310 );

    SC_METHOD(thread_in_channels_ch2_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln129_reg_310 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_channels_ch3_blk_n);
    sensitive << ( in_channels_ch3_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln129_reg_310 );

    SC_METHOD(thread_in_channels_ch3_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln129_reg_310 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_height_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_height_empty_n );

    SC_METHOD(thread_in_height_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_width_empty_n );
    sensitive << ( in_height_empty_n );
    sensitive << ( out_width_full_n );
    sensitive << ( out_height_full_n );
    sensitive << ( Y_scale_empty_n );
    sensitive << ( U_scale_empty_n );
    sensitive << ( V_scale_empty_n );

    SC_METHOD(thread_in_width_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_width_empty_n );

    SC_METHOD(thread_in_width_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_width_empty_n );
    sensitive << ( in_height_empty_n );
    sensitive << ( out_width_full_n );
    sensitive << ( out_height_full_n );
    sensitive << ( Y_scale_empty_n );
    sensitive << ( U_scale_empty_n );
    sensitive << ( V_scale_empty_n );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_mul_ln137_fu_206_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( mul_ln137_fu_206_p00 );

    SC_METHOD(thread_mul_ln137_fu_206_p00);
    sensitive << ( in_channels_ch1_dout );

    SC_METHOD(thread_mul_ln137_fu_206_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln138_reg_290 );

    SC_METHOD(thread_mul_ln137_fu_206_p2);
    sensitive << ( mul_ln137_fu_206_p0 );
    sensitive << ( mul_ln137_fu_206_p1 );

    SC_METHOD(thread_mul_ln138_fu_215_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( mul_ln138_fu_215_p00 );

    SC_METHOD(thread_mul_ln138_fu_215_p00);
    sensitive << ( in_channels_ch2_dout );

    SC_METHOD(thread_mul_ln138_fu_215_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln139_reg_295 );

    SC_METHOD(thread_mul_ln138_fu_215_p2);
    sensitive << ( mul_ln138_fu_215_p0 );
    sensitive << ( mul_ln138_fu_215_p1 );

    SC_METHOD(thread_mul_ln139_fu_224_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( mul_ln139_fu_224_p00 );

    SC_METHOD(thread_mul_ln139_fu_224_p00);
    sensitive << ( in_channels_ch3_dout );

    SC_METHOD(thread_mul_ln139_fu_224_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln129_reg_300 );

    SC_METHOD(thread_mul_ln139_fu_224_p2);
    sensitive << ( mul_ln139_fu_224_p0 );
    sensitive << ( mul_ln139_fu_224_p1 );

    SC_METHOD(thread_out_channels_ch1_blk_n);
    sensitive << ( out_channels_ch1_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln129_reg_310_pp0_iter1_reg );

    SC_METHOD(thread_out_channels_ch1_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln129_reg_310_pp0_iter1_reg );
    sensitive << ( trunc_ln_reg_319 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_channels_ch1_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln129_reg_310_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_channels_ch2_blk_n);
    sensitive << ( out_channels_ch2_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln129_reg_310_pp0_iter1_reg );

    SC_METHOD(thread_out_channels_ch2_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln129_reg_310_pp0_iter1_reg );
    sensitive << ( trunc_ln1_reg_324 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_channels_ch2_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln129_reg_310_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_channels_ch3_blk_n);
    sensitive << ( out_channels_ch3_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln129_reg_310_pp0_iter1_reg );

    SC_METHOD(thread_out_channels_ch3_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln129_reg_310_pp0_iter1_reg );
    sensitive << ( trunc_ln2_reg_329 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_channels_ch3_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln129_reg_310_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_height_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_height_full_n );

    SC_METHOD(thread_out_height_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_width_empty_n );
    sensitive << ( in_height_dout );
    sensitive << ( in_height_empty_n );
    sensitive << ( out_width_full_n );
    sensitive << ( out_height_full_n );
    sensitive << ( Y_scale_empty_n );
    sensitive << ( U_scale_empty_n );
    sensitive << ( V_scale_empty_n );

    SC_METHOD(thread_out_height_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_width_empty_n );
    sensitive << ( in_height_empty_n );
    sensitive << ( out_width_full_n );
    sensitive << ( out_height_full_n );
    sensitive << ( Y_scale_empty_n );
    sensitive << ( U_scale_empty_n );
    sensitive << ( V_scale_empty_n );

    SC_METHOD(thread_out_width_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_width_full_n );

    SC_METHOD(thread_out_width_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_width_dout );
    sensitive << ( in_width_empty_n );
    sensitive << ( in_height_empty_n );
    sensitive << ( out_width_full_n );
    sensitive << ( out_height_full_n );
    sensitive << ( Y_scale_empty_n );
    sensitive << ( U_scale_empty_n );
    sensitive << ( V_scale_empty_n );

    SC_METHOD(thread_out_width_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_width_empty_n );
    sensitive << ( in_height_empty_n );
    sensitive << ( out_width_full_n );
    sensitive << ( out_height_full_n );
    sensitive << ( Y_scale_empty_n );
    sensitive << ( U_scale_empty_n );
    sensitive << ( V_scale_empty_n );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_zext_ln129_fu_182_p1);
    sensitive << ( V_scale_read_reg_275 );

    SC_METHOD(thread_zext_ln138_fu_176_p1);
    sensitive << ( Y_scale_read_reg_265 );

    SC_METHOD(thread_zext_ln139_fu_179_p1);
    sensitive << ( U_scale_read_reg_270 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_width_empty_n );
    sensitive << ( in_height_empty_n );
    sensitive << ( out_width_full_n );
    sensitive << ( out_height_full_n );
    sensitive << ( Y_scale_empty_n );
    sensitive << ( U_scale_empty_n );
    sensitive << ( V_scale_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln129_fu_191_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "yuv_scale_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, in_channels_ch1_dout, "(port)in_channels_ch1_dout");
    sc_trace(mVcdFile, in_channels_ch1_empty_n, "(port)in_channels_ch1_empty_n");
    sc_trace(mVcdFile, in_channels_ch1_read, "(port)in_channels_ch1_read");
    sc_trace(mVcdFile, in_channels_ch2_dout, "(port)in_channels_ch2_dout");
    sc_trace(mVcdFile, in_channels_ch2_empty_n, "(port)in_channels_ch2_empty_n");
    sc_trace(mVcdFile, in_channels_ch2_read, "(port)in_channels_ch2_read");
    sc_trace(mVcdFile, in_channels_ch3_dout, "(port)in_channels_ch3_dout");
    sc_trace(mVcdFile, in_channels_ch3_empty_n, "(port)in_channels_ch3_empty_n");
    sc_trace(mVcdFile, in_channels_ch3_read, "(port)in_channels_ch3_read");
    sc_trace(mVcdFile, in_width_dout, "(port)in_width_dout");
    sc_trace(mVcdFile, in_width_empty_n, "(port)in_width_empty_n");
    sc_trace(mVcdFile, in_width_read, "(port)in_width_read");
    sc_trace(mVcdFile, in_height_dout, "(port)in_height_dout");
    sc_trace(mVcdFile, in_height_empty_n, "(port)in_height_empty_n");
    sc_trace(mVcdFile, in_height_read, "(port)in_height_read");
    sc_trace(mVcdFile, out_channels_ch1_din, "(port)out_channels_ch1_din");
    sc_trace(mVcdFile, out_channels_ch1_full_n, "(port)out_channels_ch1_full_n");
    sc_trace(mVcdFile, out_channels_ch1_write, "(port)out_channels_ch1_write");
    sc_trace(mVcdFile, out_channels_ch2_din, "(port)out_channels_ch2_din");
    sc_trace(mVcdFile, out_channels_ch2_full_n, "(port)out_channels_ch2_full_n");
    sc_trace(mVcdFile, out_channels_ch2_write, "(port)out_channels_ch2_write");
    sc_trace(mVcdFile, out_channels_ch3_din, "(port)out_channels_ch3_din");
    sc_trace(mVcdFile, out_channels_ch3_full_n, "(port)out_channels_ch3_full_n");
    sc_trace(mVcdFile, out_channels_ch3_write, "(port)out_channels_ch3_write");
    sc_trace(mVcdFile, out_width_din, "(port)out_width_din");
    sc_trace(mVcdFile, out_width_full_n, "(port)out_width_full_n");
    sc_trace(mVcdFile, out_width_write, "(port)out_width_write");
    sc_trace(mVcdFile, out_height_din, "(port)out_height_din");
    sc_trace(mVcdFile, out_height_full_n, "(port)out_height_full_n");
    sc_trace(mVcdFile, out_height_write, "(port)out_height_write");
    sc_trace(mVcdFile, Y_scale_dout, "(port)Y_scale_dout");
    sc_trace(mVcdFile, Y_scale_empty_n, "(port)Y_scale_empty_n");
    sc_trace(mVcdFile, Y_scale_read, "(port)Y_scale_read");
    sc_trace(mVcdFile, U_scale_dout, "(port)U_scale_dout");
    sc_trace(mVcdFile, U_scale_empty_n, "(port)U_scale_empty_n");
    sc_trace(mVcdFile, U_scale_read, "(port)U_scale_read");
    sc_trace(mVcdFile, V_scale_dout, "(port)V_scale_dout");
    sc_trace(mVcdFile, V_scale_empty_n, "(port)V_scale_empty_n");
    sc_trace(mVcdFile, V_scale_read, "(port)V_scale_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, in_channels_ch1_blk_n, "in_channels_ch1_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln129_reg_310, "icmp_ln129_reg_310");
    sc_trace(mVcdFile, in_channels_ch2_blk_n, "in_channels_ch2_blk_n");
    sc_trace(mVcdFile, in_channels_ch3_blk_n, "in_channels_ch3_blk_n");
    sc_trace(mVcdFile, in_width_blk_n, "in_width_blk_n");
    sc_trace(mVcdFile, in_height_blk_n, "in_height_blk_n");
    sc_trace(mVcdFile, out_channels_ch1_blk_n, "out_channels_ch1_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, icmp_ln129_reg_310_pp0_iter1_reg, "icmp_ln129_reg_310_pp0_iter1_reg");
    sc_trace(mVcdFile, out_channels_ch2_blk_n, "out_channels_ch2_blk_n");
    sc_trace(mVcdFile, out_channels_ch3_blk_n, "out_channels_ch3_blk_n");
    sc_trace(mVcdFile, out_width_blk_n, "out_width_blk_n");
    sc_trace(mVcdFile, out_height_blk_n, "out_height_blk_n");
    sc_trace(mVcdFile, Y_scale_blk_n, "Y_scale_blk_n");
    sc_trace(mVcdFile, U_scale_blk_n, "U_scale_blk_n");
    sc_trace(mVcdFile, V_scale_blk_n, "V_scale_blk_n");
    sc_trace(mVcdFile, indvar_flatten_reg_165, "indvar_flatten_reg_165");
    sc_trace(mVcdFile, Y_scale_read_reg_265, "Y_scale_read_reg_265");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, U_scale_read_reg_270, "U_scale_read_reg_270");
    sc_trace(mVcdFile, V_scale_read_reg_275, "V_scale_read_reg_275");
    sc_trace(mVcdFile, width_reg_280, "width_reg_280");
    sc_trace(mVcdFile, height_reg_285, "height_reg_285");
    sc_trace(mVcdFile, zext_ln138_fu_176_p1, "zext_ln138_fu_176_p1");
    sc_trace(mVcdFile, zext_ln138_reg_290, "zext_ln138_reg_290");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln139_fu_179_p1, "zext_ln139_fu_179_p1");
    sc_trace(mVcdFile, zext_ln139_reg_295, "zext_ln139_reg_295");
    sc_trace(mVcdFile, zext_ln129_fu_182_p1, "zext_ln129_fu_182_p1");
    sc_trace(mVcdFile, zext_ln129_reg_300, "zext_ln129_reg_300");
    sc_trace(mVcdFile, bound_fu_259_p2, "bound_fu_259_p2");
    sc_trace(mVcdFile, bound_reg_305, "bound_reg_305");
    sc_trace(mVcdFile, icmp_ln129_fu_191_p2, "icmp_ln129_fu_191_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter2, "ap_block_state5_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln129_fu_196_p2, "add_ln129_fu_196_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, trunc_ln_reg_319, "trunc_ln_reg_319");
    sc_trace(mVcdFile, trunc_ln1_reg_324, "trunc_ln1_reg_324");
    sc_trace(mVcdFile, trunc_ln2_reg_329, "trunc_ln2_reg_329");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, mul_ln137_fu_206_p0, "mul_ln137_fu_206_p0");
    sc_trace(mVcdFile, mul_ln137_fu_206_p1, "mul_ln137_fu_206_p1");
    sc_trace(mVcdFile, mul_ln138_fu_215_p0, "mul_ln138_fu_215_p0");
    sc_trace(mVcdFile, mul_ln138_fu_215_p1, "mul_ln138_fu_215_p1");
    sc_trace(mVcdFile, mul_ln139_fu_224_p0, "mul_ln139_fu_224_p0");
    sc_trace(mVcdFile, mul_ln139_fu_224_p1, "mul_ln139_fu_224_p1");
    sc_trace(mVcdFile, mul_ln137_fu_206_p2, "mul_ln137_fu_206_p2");
    sc_trace(mVcdFile, mul_ln138_fu_215_p2, "mul_ln138_fu_215_p2");
    sc_trace(mVcdFile, mul_ln139_fu_224_p2, "mul_ln139_fu_224_p2");
    sc_trace(mVcdFile, bound_fu_259_p0, "bound_fu_259_p0");
    sc_trace(mVcdFile, bound_fu_259_p1, "bound_fu_259_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, bound_fu_259_p00, "bound_fu_259_p00");
    sc_trace(mVcdFile, bound_fu_259_p10, "bound_fu_259_p10");
    sc_trace(mVcdFile, mul_ln137_fu_206_p00, "mul_ln137_fu_206_p00");
    sc_trace(mVcdFile, mul_ln138_fu_215_p00, "mul_ln138_fu_215_p00");
    sc_trace(mVcdFile, mul_ln139_fu_224_p00, "mul_ln139_fu_224_p00");
#endif

    }
}

yuv_scale::~yuv_scale() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete yuv_filter_mul_mubkb_U28;
}

void yuv_scale::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_fu_191_p2.read()))) {
        indvar_flatten_reg_165 = add_ln129_fu_196_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        indvar_flatten_reg_165 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, Y_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, U_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_width_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_height_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_width_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_height_full_n.read())))) {
        U_scale_read_reg_270 = U_scale_dout.read();
        V_scale_read_reg_275 = V_scale_dout.read();
        Y_scale_read_reg_265 = Y_scale_dout.read();
        height_reg_285 = in_height_dout.read();
        width_reg_280 = in_width_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        bound_reg_305 = bound_fu_259_p2.read();
        zext_ln129_reg_300 = zext_ln129_fu_182_p1.read();
        zext_ln138_reg_290 = zext_ln138_fu_176_p1.read();
        zext_ln139_reg_295 = zext_ln139_fu_179_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln129_reg_310 = icmp_ln129_fu_191_p2.read();
        icmp_ln129_reg_310_pp0_iter1_reg = icmp_ln129_reg_310.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        trunc_ln1_reg_324 = mul_ln138_fu_215_p2.read().range(14, 7);
        trunc_ln2_reg_329 = mul_ln139_fu_224_p2.read().range(14, 7);
        trunc_ln_reg_319 = mul_ln137_fu_206_p2.read().range(14, 7);
    }
}

void yuv_scale::thread_U_scale_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        U_scale_blk_n = U_scale_empty_n.read();
    } else {
        U_scale_blk_n = ap_const_logic_1;
    }
}

void yuv_scale::thread_U_scale_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, Y_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, U_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_width_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_height_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_width_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_height_full_n.read())))) {
        U_scale_read = ap_const_logic_1;
    } else {
        U_scale_read = ap_const_logic_0;
    }
}

void yuv_scale::thread_V_scale_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        V_scale_blk_n = V_scale_empty_n.read();
    } else {
        V_scale_blk_n = ap_const_logic_1;
    }
}

void yuv_scale::thread_V_scale_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, Y_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, U_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_width_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_height_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_width_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_height_full_n.read())))) {
        V_scale_read = ap_const_logic_1;
    } else {
        V_scale_read = ap_const_logic_0;
    }
}

void yuv_scale::thread_Y_scale_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        Y_scale_blk_n = Y_scale_empty_n.read();
    } else {
        Y_scale_blk_n = ap_const_logic_1;
    }
}

void yuv_scale::thread_Y_scale_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, Y_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, U_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_width_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_height_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_width_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_height_full_n.read())))) {
        Y_scale_read = ap_const_logic_1;
    } else {
        Y_scale_read = ap_const_logic_0;
    }
}

void yuv_scale::thread_add_ln129_fu_196_p2() {
    add_ln129_fu_196_p2 = (!indvar_flatten_reg_165.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(indvar_flatten_reg_165.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void yuv_scale::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void yuv_scale::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void yuv_scale::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void yuv_scale::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[3];
}

void yuv_scale::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void yuv_scale::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_channels_ch1_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_channels_ch2_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_channels_ch3_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_channels_ch1_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_channels_ch2_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_channels_ch3_full_n.read())))));
}

void yuv_scale::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_channels_ch1_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_channels_ch2_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_channels_ch3_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_channels_ch1_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_channels_ch2_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_channels_ch3_full_n.read())))));
}

void yuv_scale::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_channels_ch1_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_channels_ch2_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_channels_ch3_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_channels_ch1_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_channels_ch2_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_channels_ch3_full_n.read())))));
}

void yuv_scale::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, Y_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, U_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_width_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_height_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_width_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_height_full_n.read()));
}

void yuv_scale::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void yuv_scale::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_channels_ch1_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_channels_ch2_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_channels_ch3_empty_n.read())));
}

void yuv_scale::thread_ap_block_state5_pp0_stage0_iter2() {
    ap_block_state5_pp0_stage0_iter2 = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_channels_ch1_full_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_channels_ch2_full_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_channels_ch3_full_n.read())));
}

void yuv_scale::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(icmp_ln129_fu_191_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void yuv_scale::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void yuv_scale::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void yuv_scale::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void yuv_scale::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void yuv_scale::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void yuv_scale::thread_bound_fu_259_p0() {
    bound_fu_259_p0 =  (sc_lv<16>) (bound_fu_259_p00.read());
}

void yuv_scale::thread_bound_fu_259_p00() {
    bound_fu_259_p00 = esl_zext<32,16>(height_reg_285.read());
}

void yuv_scale::thread_bound_fu_259_p1() {
    bound_fu_259_p1 =  (sc_lv<16>) (bound_fu_259_p10.read());
}

void yuv_scale::thread_bound_fu_259_p10() {
    bound_fu_259_p10 = esl_zext<32,16>(width_reg_280.read());
}

void yuv_scale::thread_icmp_ln129_fu_191_p2() {
    icmp_ln129_fu_191_p2 = (!indvar_flatten_reg_165.read().is_01() || !bound_reg_305.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_165.read() == bound_reg_305.read());
}

void yuv_scale::thread_in_channels_ch1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0))) {
        in_channels_ch1_blk_n = in_channels_ch1_empty_n.read();
    } else {
        in_channels_ch1_blk_n = ap_const_logic_1;
    }
}

void yuv_scale::thread_in_channels_ch1_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_channels_ch1_read = ap_const_logic_1;
    } else {
        in_channels_ch1_read = ap_const_logic_0;
    }
}

void yuv_scale::thread_in_channels_ch2_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0))) {
        in_channels_ch2_blk_n = in_channels_ch2_empty_n.read();
    } else {
        in_channels_ch2_blk_n = ap_const_logic_1;
    }
}

void yuv_scale::thread_in_channels_ch2_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_channels_ch2_read = ap_const_logic_1;
    } else {
        in_channels_ch2_read = ap_const_logic_0;
    }
}

void yuv_scale::thread_in_channels_ch3_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0))) {
        in_channels_ch3_blk_n = in_channels_ch3_empty_n.read();
    } else {
        in_channels_ch3_blk_n = ap_const_logic_1;
    }
}

void yuv_scale::thread_in_channels_ch3_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln129_reg_310.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_channels_ch3_read = ap_const_logic_1;
    } else {
        in_channels_ch3_read = ap_const_logic_0;
    }
}

void yuv_scale::thread_in_height_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        in_height_blk_n = in_height_empty_n.read();
    } else {
        in_height_blk_n = ap_const_logic_1;
    }
}

void yuv_scale::thread_in_height_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, Y_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, U_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_width_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_height_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_width_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_height_full_n.read())))) {
        in_height_read = ap_const_logic_1;
    } else {
        in_height_read = ap_const_logic_0;
    }
}

void yuv_scale::thread_in_width_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        in_width_blk_n = in_width_empty_n.read();
    } else {
        in_width_blk_n = ap_const_logic_1;
    }
}

void yuv_scale::thread_in_width_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, Y_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, U_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_width_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_height_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_width_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_height_full_n.read())))) {
        in_width_read = ap_const_logic_1;
    } else {
        in_width_read = ap_const_logic_0;
    }
}

void yuv_scale::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void yuv_scale::thread_mul_ln137_fu_206_p0() {
    mul_ln137_fu_206_p0 =  (sc_lv<8>) (mul_ln137_fu_206_p00.read());
}

void yuv_scale::thread_mul_ln137_fu_206_p00() {
    mul_ln137_fu_206_p00 = esl_zext<15,8>(in_channels_ch1_dout.read());
}

void yuv_scale::thread_mul_ln137_fu_206_p1() {
    mul_ln137_fu_206_p1 =  (sc_lv<8>) (zext_ln138_reg_290.read());
}

void yuv_scale::thread_mul_ln137_fu_206_p2() {
    mul_ln137_fu_206_p2 = (!mul_ln137_fu_206_p0.read().is_01() || !mul_ln137_fu_206_p1.read().is_01())? sc_lv<15>(): sc_biguint<8>(mul_ln137_fu_206_p0.read()) * sc_biguint<8>(mul_ln137_fu_206_p1.read());
}

void yuv_scale::thread_mul_ln138_fu_215_p0() {
    mul_ln138_fu_215_p0 =  (sc_lv<8>) (mul_ln138_fu_215_p00.read());
}

void yuv_scale::thread_mul_ln138_fu_215_p00() {
    mul_ln138_fu_215_p00 = esl_zext<15,8>(in_channels_ch2_dout.read());
}

void yuv_scale::thread_mul_ln138_fu_215_p1() {
    mul_ln138_fu_215_p1 =  (sc_lv<8>) (zext_ln139_reg_295.read());
}

void yuv_scale::thread_mul_ln138_fu_215_p2() {
    mul_ln138_fu_215_p2 = (!mul_ln138_fu_215_p0.read().is_01() || !mul_ln138_fu_215_p1.read().is_01())? sc_lv<15>(): sc_biguint<8>(mul_ln138_fu_215_p0.read()) * sc_biguint<8>(mul_ln138_fu_215_p1.read());
}

void yuv_scale::thread_mul_ln139_fu_224_p0() {
    mul_ln139_fu_224_p0 =  (sc_lv<8>) (mul_ln139_fu_224_p00.read());
}

void yuv_scale::thread_mul_ln139_fu_224_p00() {
    mul_ln139_fu_224_p00 = esl_zext<15,8>(in_channels_ch3_dout.read());
}

void yuv_scale::thread_mul_ln139_fu_224_p1() {
    mul_ln139_fu_224_p1 =  (sc_lv<8>) (zext_ln129_reg_300.read());
}

void yuv_scale::thread_mul_ln139_fu_224_p2() {
    mul_ln139_fu_224_p2 = (!mul_ln139_fu_224_p0.read().is_01() || !mul_ln139_fu_224_p1.read().is_01())? sc_lv<15>(): sc_biguint<8>(mul_ln139_fu_224_p0.read()) * sc_biguint<8>(mul_ln139_fu_224_p1.read());
}

void yuv_scale::thread_out_channels_ch1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()))) {
        out_channels_ch1_blk_n = out_channels_ch1_full_n.read();
    } else {
        out_channels_ch1_blk_n = ap_const_logic_1;
    }
}

void yuv_scale::thread_out_channels_ch1_din() {
    out_channels_ch1_din = trunc_ln_reg_319.read();
}

void yuv_scale::thread_out_channels_ch1_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_channels_ch1_write = ap_const_logic_1;
    } else {
        out_channels_ch1_write = ap_const_logic_0;
    }
}

void yuv_scale::thread_out_channels_ch2_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()))) {
        out_channels_ch2_blk_n = out_channels_ch2_full_n.read();
    } else {
        out_channels_ch2_blk_n = ap_const_logic_1;
    }
}

void yuv_scale::thread_out_channels_ch2_din() {
    out_channels_ch2_din = trunc_ln1_reg_324.read();
}

void yuv_scale::thread_out_channels_ch2_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_channels_ch2_write = ap_const_logic_1;
    } else {
        out_channels_ch2_write = ap_const_logic_0;
    }
}

void yuv_scale::thread_out_channels_ch3_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()))) {
        out_channels_ch3_blk_n = out_channels_ch3_full_n.read();
    } else {
        out_channels_ch3_blk_n = ap_const_logic_1;
    }
}

void yuv_scale::thread_out_channels_ch3_din() {
    out_channels_ch3_din = trunc_ln2_reg_329.read();
}

void yuv_scale::thread_out_channels_ch3_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln129_reg_310_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_channels_ch3_write = ap_const_logic_1;
    } else {
        out_channels_ch3_write = ap_const_logic_0;
    }
}

void yuv_scale::thread_out_height_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_height_blk_n = out_height_full_n.read();
    } else {
        out_height_blk_n = ap_const_logic_1;
    }
}

void yuv_scale::thread_out_height_din() {
    out_height_din = in_height_dout.read();
}

void yuv_scale::thread_out_height_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, Y_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, U_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_width_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_height_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_width_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_height_full_n.read())))) {
        out_height_write = ap_const_logic_1;
    } else {
        out_height_write = ap_const_logic_0;
    }
}

void yuv_scale::thread_out_width_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_width_blk_n = out_width_full_n.read();
    } else {
        out_width_blk_n = ap_const_logic_1;
    }
}

void yuv_scale::thread_out_width_din() {
    out_width_din = in_width_dout.read();
}

void yuv_scale::thread_out_width_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, Y_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, U_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_width_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_height_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_width_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_height_full_n.read())))) {
        out_width_write = ap_const_logic_1;
    } else {
        out_width_write = ap_const_logic_0;
    }
}

void yuv_scale::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void yuv_scale::thread_start_out() {
    start_out = real_start.read();
}

void yuv_scale::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void yuv_scale::thread_zext_ln129_fu_182_p1() {
    zext_ln129_fu_182_p1 = esl_zext<15,8>(V_scale_read_reg_275.read());
}

void yuv_scale::thread_zext_ln138_fu_176_p1() {
    zext_ln138_fu_176_p1 = esl_zext<15,8>(Y_scale_read_reg_265.read());
}

void yuv_scale::thread_zext_ln139_fu_179_p1() {
    zext_ln139_fu_179_p1 = esl_zext<15,8>(U_scale_read_reg_270.read());
}

void yuv_scale::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, Y_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, U_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_scale_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_width_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_height_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_width_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_height_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln129_fu_191_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln129_fu_191_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

